
Lidar_RTOS_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d78  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006f58  08006f58  00007f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff0  08006ff0  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006ff0  08006ff0  00007ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ff8  08006ff8  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff8  08006ff8  00007ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ffc  08006ffc  00007ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000068  08007068  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08007068  00008490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e5a  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf5  00000000  00000000  0001bef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daa  00000000  00000000  0001fc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa5b  00000000  00000000  00020a32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001539a  00000000  00000000  0004048d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7f1f  00000000  00000000  00055827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000510c  00000000  00000000  0011d78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00122898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006f40 	.word	0x08006f40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006f40 	.word	0x08006f40

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_DMA_Init+0x70>)
 80005b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005ba:	4a19      	ldr	r2, [pc, #100]	@ (8000620 <MX_DMA_Init+0x70>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_DMA_Init+0x70>)
 80005c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_DMA_Init+0x70>)
 80005d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005d2:	4a13      	ldr	r2, [pc, #76]	@ (8000620 <MX_DMA_Init+0x70>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_DMA_Init+0x70>)
 80005dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	200b      	movs	r0, #11
 80005ec:	f000 feed 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005f0:	200b      	movs	r0, #11
 80005f2:	f000 ff04 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2100      	movs	r1, #0
 80005fa:	200c      	movs	r0, #12
 80005fc:	f000 fee5 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000600:	200c      	movs	r0, #12
 8000602:	f000 fefc 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	200d      	movs	r0, #13
 800060c:	f000 fedd 	bl	80013ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000610:	200d      	movs	r0, #13
 8000612:	f000 fef4 	bl	80013fe <HAL_NVIC_EnableIRQ>

}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	@ 0x28
 8000628:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063a:	4b35      	ldr	r3, [pc, #212]	@ (8000710 <MX_GPIO_Init+0xec>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	4a34      	ldr	r2, [pc, #208]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000640:	f043 0304 	orr.w	r3, r3, #4
 8000644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000646:	4b32      	ldr	r3, [pc, #200]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	f003 0304 	and.w	r3, r3, #4
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000652:	4b2f      	ldr	r3, [pc, #188]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	4a2e      	ldr	r2, [pc, #184]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000658:	f043 0320 	orr.w	r3, r3, #32
 800065c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065e:	4b2c      	ldr	r3, [pc, #176]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000662:	f003 0320 	and.w	r3, r3, #32
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b29      	ldr	r3, [pc, #164]	@ (8000710 <MX_GPIO_Init+0xec>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066e:	4a28      	ldr	r2, [pc, #160]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000676:	4b26      	ldr	r3, [pc, #152]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	4a22      	ldr	r2, [pc, #136]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068e:	4b20      	ldr	r3, [pc, #128]	@ (8000710 <MX_GPIO_Init+0xec>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a2:	f001 fac3 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2130      	movs	r1, #48	@ 0x30
 80006aa:	481a      	ldr	r0, [pc, #104]	@ (8000714 <MX_GPIO_Init+0xf0>)
 80006ac:	f001 fabe 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	4814      	ldr	r0, [pc, #80]	@ (8000718 <MX_GPIO_Init+0xf4>)
 80006c8:	f001 f92e 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006cc:	2320      	movs	r3, #32
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e6:	f001 f91f 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LIDAR_M_EN_Pin|LIDAR_DEV_EN_Pin;
 80006ea:	2330      	movs	r3, #48	@ 0x30
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	@ (8000714 <MX_GPIO_Init+0xf0>)
 8000702:	f001 f911 	bl	8001928 <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000
 8000714:	48000400 	.word	0x48000400
 8000718:	48000800 	.word	0x48000800

0800071c <__io_putchar>:
	//while(irq_TX2_completed!=1);
	//irq_TX2_completed=0;
	return len;
}*/

int __io_putchar(char ch){
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,HAL_MAX_DELAY);
 8000726:	1df9      	adds	r1, r7, #7
 8000728:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800072c:	2201      	movs	r2, #1
 800072e:	4804      	ldr	r0, [pc, #16]	@ (8000740 <__io_putchar+0x24>)
 8000730:	f003 fbb6 	bl	8003ea0 <HAL_UART_Transmit>
	return ch;
 8000734:	79fb      	ldrb	r3, [r7, #7]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000018c 	.word	0x2000018c

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f000 fcd0 	bl	80010ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074e:	f000 f861 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000752:	f7ff ff67 	bl	8000624 <MX_GPIO_Init>
  MX_DMA_Init();
 8000756:	f7ff ff2b 	bl	80005b0 <MX_DMA_Init>
  MX_TIM2_Init();
 800075a:	f000 fa0d 	bl	8000b78 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800075e:	f000 fad9 	bl	8000d14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000762:	f000 fb23 	bl	8000dac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim2);
 8000766:	4823      	ldr	r0, [pc, #140]	@ (80007f4 <main+0xb0>)
 8000768:	f002 faa2 	bl	8002cb0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800076c:	2104      	movs	r1, #4
 800076e:	4821      	ldr	r0, [pc, #132]	@ (80007f4 <main+0xb0>)
 8000770:	f002 fb62 	bl	8002e38 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(LIDAR_M_EN_GPIO_Port,LIDAR_M_EN_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2110      	movs	r1, #16
 8000778:	481f      	ldr	r0, [pc, #124]	@ (80007f8 <main+0xb4>)
 800077a:	f001 fa57 	bl	8001c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LIDAR_DEV_EN_GPIO_Port,LIDAR_DEV_EN_Pin, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2120      	movs	r1, #32
 8000782:	481d      	ldr	r0, [pc, #116]	@ (80007f8 <main+0xb4>)
 8000784:	f001 fa52 	bl	8001c2c <HAL_GPIO_WritePin>
	//__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);

	uint8_t command[2] = {0xA5,0x90};
 8000788:	f249 03a5 	movw	r3, #37029	@ 0x90a5
 800078c:	823b      	strh	r3, [r7, #16]
	LIDAR_MSG lidar_msg;
	GET_HEALTH_T* content;
	lidar_msg.CONTENT = (GET_HEALTH_T*)content;
 800078e:	69bb      	ldr	r3, [r7, #24]
 8000790:	60fb      	str	r3, [r7, #12]


	HAL_Delay(2000);
 8000792:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000796:	f000 fd1b 	bl	80011d0 <HAL_Delay>
	printf("====== START LIDAR =====\r\n");
 800079a:	4818      	ldr	r0, [pc, #96]	@ (80007fc <main+0xb8>)
 800079c:	f005 fd6e 	bl	800627c <puts>

	HAL_UART_Transmit(&huart1, command, 2,HAL_MAX_DELAY);
 80007a0:	f107 0110 	add.w	r1, r7, #16
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a8:	2202      	movs	r2, #2
 80007aa:	4815      	ldr	r0, [pc, #84]	@ (8000800 <main+0xbc>)
 80007ac:	f003 fb78 	bl	8003ea0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&Lidar_byte, 1);
 80007b0:	2201      	movs	r2, #1
 80007b2:	4914      	ldr	r1, [pc, #80]	@ (8000804 <main+0xc0>)
 80007b4:	4812      	ldr	r0, [pc, #72]	@ (8000800 <main+0xbc>)
 80007b6:	f003 fc01 	bl	8003fbc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	extern int i_RX;
	int LIDAR_LENGTH = 20+7;
 80007ba:	231b      	movs	r3, #27
 80007bc:	617b      	str	r3, [r7, #20]
	extern uint8_t tab[20+7];
	while (1)
	{
		if(i_RX==LIDAR_LENGTH){
 80007be:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <main+0xc4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d1fa      	bne.n	80007be <main+0x7a>
			for (int i=0;i<LIDAR_LENGTH;i++){
 80007c8:	2300      	movs	r3, #0
 80007ca:	61fb      	str	r3, [r7, #28]
 80007cc:	e00d      	b.n	80007ea <main+0xa6>
			printf(">%02X\r\n",tab[i]);
 80007ce:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <main+0xc8>)
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	4413      	add	r3, r2
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4619      	mov	r1, r3
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <main+0xcc>)
 80007da:	f005 fce7 	bl	80061ac <iprintf>
			i_RX=0;
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <main+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
			for (int i=0;i<LIDAR_LENGTH;i++){
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	3301      	adds	r3, #1
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbed      	blt.n	80007ce <main+0x8a>
		if(i_RX==LIDAR_LENGTH){
 80007f2:	e7e4      	b.n	80007be <main+0x7a>
 80007f4:	200000ac 	.word	0x200000ac
 80007f8:	48000400 	.word	0x48000400
 80007fc:	08006f58 	.word	0x08006f58
 8000800:	200000f8 	.word	0x200000f8
 8000804:	20000084 	.word	0x20000084
 8000808:	20000088 	.word	0x20000088
 800080c:	2000008c 	.word	0x2000008c
 8000810:	08006f74 	.word	0x08006f74

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	2238      	movs	r2, #56	@ 0x38
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 fd32 	bl	800628c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000836:	2000      	movs	r0, #0
 8000838:	f001 fa10 	bl	8001c5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083c:	2302      	movs	r3, #2
 800083e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000846:	2340      	movs	r3, #64	@ 0x40
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084e:	2302      	movs	r3, #2
 8000850:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000852:	2304      	movs	r3, #4
 8000854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000856:	2355      	movs	r3, #85	@ 0x55
 8000858:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800085a:	2302      	movs	r3, #2
 800085c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800085e:	2302      	movs	r3, #2
 8000860:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000862:	2302      	movs	r3, #2
 8000864:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000866:	f107 0318 	add.w	r3, r7, #24
 800086a:	4618      	mov	r0, r3
 800086c:	f001 faaa 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000876:	f000 f818 	bl	80008aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087a:	230f      	movs	r3, #15
 800087c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087e:	2303      	movs	r3, #3
 8000880:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2104      	movs	r1, #4
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fda8 	bl	80023e8 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800089e:	f000 f804 	bl	80008aa <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3750      	adds	r7, #80	@ 0x50
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ae:	b672      	cpsid	i
}
 80008b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008b2:	bf00      	nop
 80008b4:	e7fd      	b.n	80008b2 <Error_Handler+0x8>
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <HAL_MspInit+0x44>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_MspInit+0x44>)
 80008cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <HAL_MspInit+0x44>)
 80008d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008da:	4a08      	ldr	r2, [pc, #32]	@ (80008fc <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <HAL_MspInit+0x44>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ee:	f001 fa59 	bl	8001da4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <NMI_Handler+0x4>

08000908 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <MemManage_Handler+0x4>

08000918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <UsageFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000956:	f000 fc1d 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <DMA1_Channel1_IRQHandler+0x10>)
 8000966:	f000 fecd 	bl	8001704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200002e0 	.word	0x200002e0

08000974 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <DMA1_Channel2_IRQHandler+0x10>)
 800097a:	f000 fec3 	bl	8001704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000280 	.word	0x20000280

08000988 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <DMA1_Channel3_IRQHandler+0x10>)
 800098e:	f000 feb9 	bl	8001704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000220 	.word	0x20000220

0800099c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <USART1_IRQHandler+0x10>)
 80009a2:	f003 fb57 	bl	8004054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000f8 	.word	0x200000f8

080009b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
int i_RX=0;

uint8_t tab[20+7];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <HAL_UART_RxCpltCallback+0x38>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d10f      	bne.n	80009e0 <HAL_UART_RxCpltCallback+0x30>
		tab[i_RX]=Lidar_byte;
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <HAL_UART_RxCpltCallback+0x3c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_UART_RxCpltCallback+0x40>)
 80009c6:	7811      	ldrb	r1, [r2, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <HAL_UART_RxCpltCallback+0x44>)
 80009ca:	54d1      	strb	r1, [r2, r3]
		i_RX++;
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <HAL_UART_RxCpltCallback+0x3c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3301      	adds	r3, #1
 80009d2:	4a06      	ldr	r2, [pc, #24]	@ (80009ec <HAL_UART_RxCpltCallback+0x3c>)
 80009d4:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t *)&Lidar_byte, 1);
 80009d6:	2201      	movs	r2, #1
 80009d8:	4905      	ldr	r1, [pc, #20]	@ (80009f0 <HAL_UART_RxCpltCallback+0x40>)
 80009da:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <HAL_UART_RxCpltCallback+0x38>)
 80009dc:	f003 faee 	bl	8003fbc <HAL_UART_Receive_IT>
	}
	if(huart==&huart2){
	}
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000f8 	.word	0x200000f8
 80009ec:	20000088 	.word	0x20000088
 80009f0:	20000084 	.word	0x20000084
 80009f4:	2000008c 	.word	0x2000008c

080009f8 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if(huart==&huart1){
	}
	if(huart==&huart2){
	}

}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	e00a      	b.n	8000a34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1e:	f3af 8000 	nop.w
 8000a22:	4601      	mov	r1, r0
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	b2ca      	uxtb	r2, r1
 8000a2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf0      	blt.n	8000a1e <_read+0x12>
  }

  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e009      	b.n	8000a6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fe5b 	bl	800071c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	dbf1      	blt.n	8000a58 <_write+0x12>
  }
  return len;
 8000a74:	687b      	ldr	r3, [r7, #4]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_close>:

int _close(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa6:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <_isatty>:

int _isatty(int file)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <_sbrk+0x5c>)
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <_sbrk+0x60>)
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <_sbrk+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d102      	bne.n	8000b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b04:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <_sbrk+0x64>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <_sbrk+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d207      	bcs.n	8000b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b18:	f005 fbc0 	bl	800629c <__errno>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	220c      	movs	r2, #12
 8000b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b26:	e009      	b.n	8000b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b28:	4b08      	ldr	r3, [pc, #32]	@ (8000b4c <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <_sbrk+0x64>)
 8000b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20008000 	.word	0x20008000
 8000b48:	00000400 	.word	0x00000400
 8000b4c:	200000a8 	.word	0x200000a8
 8000b50:	20000490 	.word	0x20000490

08000b54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08e      	sub	sp, #56	@ 0x38
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
 8000ba4:	611a      	str	r2, [r3, #16]
 8000ba6:	615a      	str	r2, [r3, #20]
 8000ba8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000baa:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bb0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 169999;
 8000bbe:	4b28      	ldr	r3, [pc, #160]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bc0:	4a28      	ldr	r2, [pc, #160]	@ (8000c64 <MX_TIM2_Init+0xec>)
 8000bc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bca:	4b25      	ldr	r3, [pc, #148]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd0:	4823      	ldr	r0, [pc, #140]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bd2:	f002 f815 	bl	8002c00 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000bdc:	f7ff fe65 	bl	80008aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bea:	4619      	mov	r1, r3
 8000bec:	481c      	ldr	r0, [pc, #112]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bee:	f002 fb37 	bl	8003260 <HAL_TIM_ConfigClockSource>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000bf8:	f7ff fe57 	bl	80008aa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bfc:	4818      	ldr	r0, [pc, #96]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000bfe:	f002 f8b9 	bl	8002d74 <HAL_TIM_PWM_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c08:	f7ff fe4f 	bl	80008aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4811      	ldr	r0, [pc, #68]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000c1c:	f003 f86e 	bl	8003cfc <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c26:	f7ff fe40 	bl	80008aa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c2a:	2360      	movs	r3, #96	@ 0x60
 8000c2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 85000;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <MX_TIM2_Init+0xf0>)
 8000c30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2204      	movs	r2, #4
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000c42:	f002 f9f9 	bl	8003038 <HAL_TIM_PWM_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000c4c:	f7ff fe2d 	bl	80008aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <MX_TIM2_Init+0xe8>)
 8000c52:	f000 f829 	bl	8000ca8 <HAL_TIM_MspPostInit>

}
 8000c56:	bf00      	nop
 8000c58:	3738      	adds	r7, #56	@ 0x38
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000ac 	.word	0x200000ac
 8000c64:	0002980f 	.word	0x0002980f
 8000c68:	00014c08 	.word	0x00014c08

08000c6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c7c:	d10b      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x38>)
 8000c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c82:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x38>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x38>)
 8000c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cc8:	d11b      	bne.n	8000d02 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_TIM_MspPostInit+0x64>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a0f      	ldr	r2, [pc, #60]	@ (8000d0c <HAL_TIM_MspPostInit+0x64>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <HAL_TIM_MspPostInit+0x64>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = LIDAR_M_SCTR_Pin;
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LIDAR_M_SCTR_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4804      	ldr	r0, [pc, #16]	@ (8000d10 <HAL_TIM_MspPostInit+0x68>)
 8000cfe:	f000 fe13 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	48000400 	.word	0x48000400

08000d14 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d18:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d1a:	4a23      	ldr	r2, [pc, #140]	@ (8000da8 <MX_USART1_UART_Init+0x94>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 128000;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d20:	f44f 32fa 	mov.w	r2, #128000	@ 0x1f400
 8000d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b17      	ldr	r3, [pc, #92]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4a:	4b16      	ldr	r3, [pc, #88]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d56:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d5c:	4811      	ldr	r0, [pc, #68]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d5e:	f003 f84f 	bl	8003e00 <HAL_UART_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d68:	f7ff fd9f 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	480d      	ldr	r0, [pc, #52]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d70:	f005 f88f 	bl	8005e92 <HAL_UARTEx_SetTxFifoThreshold>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d7a:	f7ff fd96 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d82:	f005 f8c4 	bl	8005f0e <HAL_UARTEx_SetRxFifoThreshold>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d8c:	f7ff fd8d 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <MX_USART1_UART_Init+0x90>)
 8000d92:	f005 f845 	bl	8005e20 <HAL_UARTEx_DisableFifoMode>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d9c:	f7ff fd85 	bl	80008aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200000f8 	.word	0x200000f8
 8000da8:	40013800 	.word	0x40013800

08000dac <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000db2:	4a23      	ldr	r2, [pc, #140]	@ (8000e40 <MX_USART2_UART_Init+0x94>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df4:	4811      	ldr	r0, [pc, #68]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000df6:	f003 f803 	bl	8003e00 <HAL_UART_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e00:	f7ff fd53 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	480d      	ldr	r0, [pc, #52]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000e08:	f005 f843 	bl	8005e92 <HAL_UARTEx_SetTxFifoThreshold>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e12:	f7ff fd4a 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4808      	ldr	r0, [pc, #32]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000e1a:	f005 f878 	bl	8005f0e <HAL_UARTEx_SetRxFifoThreshold>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e24:	f7ff fd41 	bl	80008aa <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_USART2_UART_Init+0x90>)
 8000e2a:	f004 fff9 	bl	8005e20 <HAL_UARTEx_DisableFifoMode>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e34:	f7ff fd39 	bl	80008aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000018c 	.word	0x2000018c
 8000e40:	40004400 	.word	0x40004400

08000e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b09c      	sub	sp, #112	@ 0x70
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	2244      	movs	r2, #68	@ 0x44
 8000e62:	2100      	movs	r1, #0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f005 fa11 	bl	800628c <memset>
  if(uartHandle->Instance==USART1)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a81      	ldr	r2, [pc, #516]	@ (8001074 <HAL_UART_MspInit+0x230>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f040 8094 	bne.w	8000f9e <HAL_UART_MspInit+0x15a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7e:	f107 0318 	add.w	r3, r7, #24
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fccc 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e8e:	f7ff fd0c 	bl	80008aa <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e92:	4b79      	ldr	r3, [pc, #484]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	4a78      	ldr	r2, [pc, #480]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e9e:	4b76      	ldr	r3, [pc, #472]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b73      	ldr	r3, [pc, #460]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	4a72      	ldr	r2, [pc, #456]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000eb0:	f043 0304 	orr.w	r3, r3, #4
 8000eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb6:	4b70      	ldr	r3, [pc, #448]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = LIDAR_RXnTX_STM_Pin|LIDAR_TXnTRX_STM_Pin;
 8000ec2:	2330      	movs	r3, #48	@ 0x30
 8000ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000eda:	4619      	mov	r1, r3
 8000edc:	4867      	ldr	r0, [pc, #412]	@ (800107c <HAL_UART_MspInit+0x238>)
 8000ede:	f000 fd23 	bl	8001928 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000ee2:	4b67      	ldr	r3, [pc, #412]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000ee4:	4a67      	ldr	r2, [pc, #412]	@ (8001084 <HAL_UART_MspInit+0x240>)
 8000ee6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ee8:	4b65      	ldr	r3, [pc, #404]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000eea:	2219      	movs	r2, #25
 8000eec:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eee:	4b64      	ldr	r3, [pc, #400]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b62      	ldr	r3, [pc, #392]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b61      	ldr	r3, [pc, #388]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f00:	4b5f      	ldr	r3, [pc, #380]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f06:	4b5e      	ldr	r3, [pc, #376]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f12:	4b5b      	ldr	r3, [pc, #364]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000f14:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000f18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f1a:	4859      	ldr	r0, [pc, #356]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000f1c:	f000 fa8a 	bl	8001434 <HAL_DMA_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000f26:	f7ff fcc0 	bl	80008aa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a54      	ldr	r2, [pc, #336]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000f2e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000f30:	4a53      	ldr	r2, [pc, #332]	@ (8001080 <HAL_UART_MspInit+0x23c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000f36:	4b54      	ldr	r3, [pc, #336]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f38:	4a54      	ldr	r2, [pc, #336]	@ (800108c <HAL_UART_MspInit+0x248>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000f3c:	4b52      	ldr	r3, [pc, #328]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f3e:	2218      	movs	r2, #24
 8000f40:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f42:	4b51      	ldr	r3, [pc, #324]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f48:	4b4f      	ldr	r3, [pc, #316]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f50:	2280      	movs	r2, #128	@ 0x80
 8000f52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f54:	4b4c      	ldr	r3, [pc, #304]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000f60:	4b49      	ldr	r3, [pc, #292]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f62:	2220      	movs	r2, #32
 8000f64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f66:	4b48      	ldr	r3, [pc, #288]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f68:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000f6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f6e:	4846      	ldr	r0, [pc, #280]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f70:	f000 fa60 	bl	8001434 <HAL_DMA_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000f7a:	f7ff fc96 	bl	80008aa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a41      	ldr	r2, [pc, #260]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f82:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f86:	4a40      	ldr	r2, [pc, #256]	@ (8001088 <HAL_UART_MspInit+0x244>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2025      	movs	r0, #37	@ 0x25
 8000f92:	f000 fa1a 	bl	80013ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f96:	2025      	movs	r0, #37	@ 0x25
 8000f98:	f000 fa31 	bl	80013fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f9c:	e065      	b.n	800106a <HAL_UART_MspInit+0x226>
  else if(uartHandle->Instance==USART2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8001090 <HAL_UART_MspInit+0x24c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d160      	bne.n	800106a <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fc33 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8000fc0:	f7ff fc73 	bl	80008aa <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000fca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd0:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	4a25      	ldr	r2, [pc, #148]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe8:	4b23      	ldr	r3, [pc, #140]	@ (8001078 <HAL_UART_MspInit+0x234>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ff4:	230c      	movs	r3, #12
 8000ff6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001004:	2307      	movs	r3, #7
 8001006:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800100c:	4619      	mov	r1, r3
 800100e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001012:	f000 fc89 	bl	8001928 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001018:	4a1f      	ldr	r2, [pc, #124]	@ (8001098 <HAL_UART_MspInit+0x254>)
 800101a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800101c:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <HAL_UART_MspInit+0x250>)
 800101e:	221b      	movs	r2, #27
 8001020:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001024:	2210      	movs	r2, #16
 8001026:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001028:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <HAL_UART_MspInit+0x250>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001030:	2280      	movs	r2, #128	@ 0x80
 8001032:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001034:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <HAL_UART_MspInit+0x250>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001046:	4b13      	ldr	r3, [pc, #76]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001048:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800104c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800104e:	4811      	ldr	r0, [pc, #68]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001050:	f000 f9f0 	bl	8001434 <HAL_DMA_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_UART_MspInit+0x21a>
      Error_Handler();
 800105a:	f7ff fc26 	bl	80008aa <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a0c      	ldr	r2, [pc, #48]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001062:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_UART_MspInit+0x250>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800106a:	bf00      	nop
 800106c:	3770      	adds	r7, #112	@ 0x70
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40013800 	.word	0x40013800
 8001078:	40021000 	.word	0x40021000
 800107c:	48000800 	.word	0x48000800
 8001080:	20000220 	.word	0x20000220
 8001084:	40020030 	.word	0x40020030
 8001088:	20000280 	.word	0x20000280
 800108c:	4002001c 	.word	0x4002001c
 8001090:	40004400 	.word	0x40004400
 8001094:	200002e0 	.word	0x200002e0
 8001098:	40020008 	.word	0x40020008

0800109c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800109c:	480d      	ldr	r0, [pc, #52]	@ (80010d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a0:	f7ff fd58 	bl	8000b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	@ (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	@ (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	@ (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80010ca:	f005 f8ed 	bl	80062a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010ce:	f7ff fb39 	bl	8000744 <main>

080010d2 <LoopForever>:

LoopForever:
    b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   r0, =_estack
 80010d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010e0:	08007000 	.word	0x08007000
  ldr r2, =_sbss
 80010e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010e8:	20000490 	.word	0x20000490

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>

080010ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f95b 	bl	80013b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f80e 	bl	8001120 <HAL_InitTick>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d002      	beq.n	8001110 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	e001      	b.n	8001114 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001110:	f7ff fbd2 	bl	80008b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001114:	79fb      	ldrb	r3, [r7, #7]

}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_InitTick+0x68>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d022      	beq.n	800117a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_InitTick+0x6c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_InitTick+0x68>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001140:	fbb1 f3f3 	udiv	r3, r1, r3
 8001144:	fbb2 f3f3 	udiv	r3, r2, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f966 	bl	800141a <HAL_SYSTICK_Config>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10f      	bne.n	8001174 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	d809      	bhi.n	800116e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115a:	2200      	movs	r2, #0
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001162:	f000 f932 	bl	80013ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_InitTick+0x70>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e007      	b.n	800117e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e004      	b.n	800117e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e001      	b.n	800117e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800117e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000008 	.word	0x20000008
 800118c:	20000000 	.word	0x20000000
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <HAL_IncTick+0x1c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_IncTick+0x20>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4413      	add	r3, r2
 80011a2:	4a03      	ldr	r2, [pc, #12]	@ (80011b0 <HAL_IncTick+0x1c>)
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	20000340 	.word	0x20000340
 80011b4:	20000008 	.word	0x20000008

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000340 	.word	0x20000340

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80011e8:	d004      	beq.n	80011f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <HAL_Delay+0x40>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f4:	bf00      	nop
 80011f6:	f7ff ffdf 	bl	80011b8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	429a      	cmp	r2, r3
 8001204:	d8f7      	bhi.n	80011f6 <HAL_Delay+0x26>
  {
  }
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000008 	.word	0x20000008

08001214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001230:	4013      	ands	r3, r2
 8001232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001246:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <__NVIC_SetPriorityGrouping+0x44>)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	60d3      	str	r3, [r2, #12]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001260:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <__NVIC_GetPriorityGrouping+0x18>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	f003 0307 	and.w	r3, r3, #7
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	db0b      	blt.n	80012a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f003 021f 	and.w	r2, r3, #31
 8001290:	4907      	ldr	r1, [pc, #28]	@ (80012b0 <__NVIC_EnableIRQ+0x38>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	095b      	lsrs	r3, r3, #5
 8001298:	2001      	movs	r0, #1
 800129a:	fa00 f202 	lsl.w	r2, r0, r2
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000e100 	.word	0xe000e100

080012b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db0a      	blt.n	80012de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	490c      	ldr	r1, [pc, #48]	@ (8001300 <__NVIC_SetPriority+0x4c>)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	0112      	lsls	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	440b      	add	r3, r1
 80012d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012dc:	e00a      	b.n	80012f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4908      	ldr	r1, [pc, #32]	@ (8001304 <__NVIC_SetPriority+0x50>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3b04      	subs	r3, #4
 80012ec:	0112      	lsls	r2, r2, #4
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	440b      	add	r3, r1
 80012f2:	761a      	strb	r2, [r3, #24]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f1c3 0307 	rsb	r3, r3, #7
 8001322:	2b04      	cmp	r3, #4
 8001324:	bf28      	it	cs
 8001326:	2304      	movcs	r3, #4
 8001328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3304      	adds	r3, #4
 800132e:	2b06      	cmp	r3, #6
 8001330:	d902      	bls.n	8001338 <NVIC_EncodePriority+0x30>
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3b03      	subs	r3, #3
 8001336:	e000      	b.n	800133a <NVIC_EncodePriority+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	401a      	ands	r2, r3
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001350:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43d9      	mvns	r1, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001360:	4313      	orrs	r3, r2
         );
}
 8001362:	4618      	mov	r0, r3
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001380:	d301      	bcc.n	8001386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001382:	2301      	movs	r3, #1
 8001384:	e00f      	b.n	80013a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <SysTick_Config+0x40>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3b01      	subs	r3, #1
 800138c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138e:	210f      	movs	r1, #15
 8001390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001394:	f7ff ff8e 	bl	80012b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <SysTick_Config+0x40>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <SysTick_Config+0x40>)
 80013a0:	2207      	movs	r2, #7
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff29 	bl	8001214 <__NVIC_SetPriorityGrouping>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
 80013d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff40 	bl	800125c <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff90 	bl	8001308 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5f 	bl	80012b4 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff33 	bl	8001278 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa4 	bl	8001370 <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e08d      	b.n	8001562 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4b47      	ldr	r3, [pc, #284]	@ (800156c <HAL_DMA_Init+0x138>)
 800144e:	429a      	cmp	r2, r3
 8001450:	d80f      	bhi.n	8001472 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	4b45      	ldr	r3, [pc, #276]	@ (8001570 <HAL_DMA_Init+0x13c>)
 800145a:	4413      	add	r3, r2
 800145c:	4a45      	ldr	r2, [pc, #276]	@ (8001574 <HAL_DMA_Init+0x140>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	009a      	lsls	r2, r3, #2
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a42      	ldr	r2, [pc, #264]	@ (8001578 <HAL_DMA_Init+0x144>)
 800146e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001470:	e00e      	b.n	8001490 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	4b40      	ldr	r3, [pc, #256]	@ (800157c <HAL_DMA_Init+0x148>)
 800147a:	4413      	add	r3, r2
 800147c:	4a3d      	ldr	r2, [pc, #244]	@ (8001574 <HAL_DMA_Init+0x140>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	009a      	lsls	r2, r3, #2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a3c      	ldr	r2, [pc, #240]	@ (8001580 <HAL_DMA_Init+0x14c>)
 800148e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2202      	movs	r2, #2
 8001494:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80014a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80014aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f9be 	bl	8001864 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80014f0:	d102      	bne.n	80014f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800150c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d010      	beq.n	8001538 <HAL_DMA_Init+0x104>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d80c      	bhi.n	8001538 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f9de 	bl	80018e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	e008      	b.n	800154a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40020407 	.word	0x40020407
 8001570:	bffdfff8 	.word	0xbffdfff8
 8001574:	cccccccd 	.word	0xcccccccd
 8001578:	40020000 	.word	0x40020000
 800157c:	bffdfbf8 	.word	0xbffdfbf8
 8001580:	40020400 	.word	0x40020400

08001584 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d005      	beq.n	80015a8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2204      	movs	r2, #4
 80015a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e037      	b.n	8001618 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 020e 	bic.w	r2, r2, #14
 80015b6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015c6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80015f4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00c      	beq.n	8001618 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800160c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001616:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d00d      	beq.n	800166a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2204      	movs	r2, #4
 8001652:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e047      	b.n	80016fa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 020e 	bic.w	r2, r2, #14
 8001678:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001698:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	f003 021f 	and.w	r2, r3, #31
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	2101      	movs	r1, #1
 80016a8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016d8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
    }
  }
  return status;
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2204      	movs	r2, #4
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4013      	ands	r3, r2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d026      	beq.n	800177e <HAL_DMA_IRQHandler+0x7a>
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d021      	beq.n	800177e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0320 	and.w	r3, r3, #32
 8001744:	2b00      	cmp	r3, #0
 8001746:	d107      	bne.n	8001758 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0204 	bic.w	r2, r2, #4
 8001756:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	2104      	movs	r1, #4
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	2b00      	cmp	r3, #0
 8001772:	d071      	beq.n	8001858 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800177c:	e06c      	b.n	8001858 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	2202      	movs	r2, #2
 8001788:	409a      	lsls	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d02e      	beq.n	80017f0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d029      	beq.n	80017f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10b      	bne.n	80017c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 020a 	bic.w	r2, r2, #10
 80017b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f003 021f 	and.w	r2, r3, #31
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	2102      	movs	r1, #2
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d038      	beq.n	8001858 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017ee:	e033      	b.n	8001858 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	2208      	movs	r2, #8
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d02a      	beq.n	800185a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d025      	beq.n	800185a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 020e 	bic.w	r2, r2, #14
 800181c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f003 021f 	and.w	r2, r3, #31
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	2101      	movs	r1, #1
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001858:	bf00      	nop
 800185a:	bf00      	nop
}
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001874:	429a      	cmp	r2, r3
 8001876:	d802      	bhi.n	800187e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	e001      	b.n	8001882 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001880:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3b08      	subs	r3, #8
 800188e:	4a12      	ldr	r2, [pc, #72]	@ (80018d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	091b      	lsrs	r3, r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	009a      	lsls	r2, r3, #2
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4413      	add	r3, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a0b      	ldr	r2, [pc, #44]	@ (80018dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2201      	movs	r2, #1
 80018b8:	409a      	lsls	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80018be:	bf00      	nop
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40020407 	.word	0x40020407
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020820 	.word	0x40020820
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	40020880 	.word	0x40020880

080018e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	461a      	mov	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a08      	ldr	r2, [pc, #32]	@ (8001924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001902:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3b01      	subs	r3, #1
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2201      	movs	r2, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	1000823f 	.word	0x1000823f
 8001924:	40020940 	.word	0x40020940

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001936:	e15a      	b.n	8001bee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 814c 	beq.w	8001be8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d005      	beq.n	8001968 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001964:	2b02      	cmp	r3, #2
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	f003 0201 	and.w	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d017      	beq.n	8001a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d123      	bne.n	8001a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	6939      	ldr	r1, [r7, #16]
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80a6 	beq.w	8001be8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8001c0c <HAL_GPIO_Init+0x2e4>)
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8001c0c <HAL_GPIO_Init+0x2e4>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa8:	4b58      	ldr	r3, [pc, #352]	@ (8001c0c <HAL_GPIO_Init+0x2e4>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab4:	4a56      	ldr	r2, [pc, #344]	@ (8001c10 <HAL_GPIO_Init+0x2e8>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ade:	d01f      	beq.n	8001b20 <HAL_GPIO_Init+0x1f8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a4c      	ldr	r2, [pc, #304]	@ (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d019      	beq.n	8001b1c <HAL_GPIO_Init+0x1f4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a4b      	ldr	r2, [pc, #300]	@ (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_GPIO_Init+0x1f0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a4a      	ldr	r2, [pc, #296]	@ (8001c1c <HAL_GPIO_Init+0x2f4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00d      	beq.n	8001b14 <HAL_GPIO_Init+0x1ec>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a49      	ldr	r2, [pc, #292]	@ (8001c20 <HAL_GPIO_Init+0x2f8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <HAL_GPIO_Init+0x1e8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a48      	ldr	r2, [pc, #288]	@ (8001c24 <HAL_GPIO_Init+0x2fc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_GPIO_Init+0x1e4>
 8001b08:	2305      	movs	r3, #5
 8001b0a:	e00a      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	e008      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b10:	2304      	movs	r3, #4
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b20:	2300      	movs	r3, #0
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b32:	4937      	ldr	r1, [pc, #220]	@ (8001c10 <HAL_GPIO_Init+0x2e8>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b40:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b64:	4a30      	ldr	r2, [pc, #192]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b8e:	4a26      	ldr	r2, [pc, #152]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b94:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be2:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f47f ae9d 	bne.w	8001938 <HAL_GPIO_Init+0x10>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	48000c00 	.word	0x48000c00
 8001c20:	48001000 	.word	0x48001000
 8001c24:	48001400 	.word	0x48001400
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d141      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c76:	d131      	bne.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c78:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c7e:	4a46      	ldr	r2, [pc, #280]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c88:	4b43      	ldr	r3, [pc, #268]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c90:	4a41      	ldr	r2, [pc, #260]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c98:	4b40      	ldr	r3, [pc, #256]	@ (8001d9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2232      	movs	r2, #50	@ 0x32
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	0c9b      	lsrs	r3, r3, #18
 8001caa:	3301      	adds	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cae:	e002      	b.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cc2:	d102      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f2      	bne.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cca:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd6:	d158      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e057      	b.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ce8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cec:	e04d      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf4:	d141      	bne.n	8001d7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cf6:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d02:	d131      	bne.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d0a:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2232      	movs	r2, #50	@ 0x32
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d3a:	e002      	b.n	8001d42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d4e:	d102      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f2      	bne.n	8001d3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d62:	d112      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e011      	b.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d78:	e007      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db2:	6093      	str	r3, [r2, #8]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e2fe      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de2:	4b97      	ldr	r3, [pc, #604]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	4b94      	ldr	r3, [pc, #592]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d102      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3e>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_OscConfig+0x44>
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4b8d      	ldr	r3, [pc, #564]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05b      	beq.n	8001ecc <HAL_RCC_OscConfig+0x108>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d157      	bne.n	8001ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e2d9      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x74>
 8001e2a:	4b85      	ldr	r3, [pc, #532]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a84      	ldr	r2, [pc, #528]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b7f      	ldr	r3, [pc, #508]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7e      	ldr	r2, [pc, #504]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7b      	ldr	r2, [pc, #492]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	4b78      	ldr	r3, [pc, #480]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a77      	ldr	r2, [pc, #476]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b75      	ldr	r3, [pc, #468]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a74      	ldr	r2, [pc, #464]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f99c 	bl	80011b8 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f998 	bl	80011b8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e29e      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	4b6a      	ldr	r3, [pc, #424]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xc0>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f988 	bl	80011b8 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f984 	bl	80011b8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	@ 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e28a      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebe:	4b60      	ldr	r3, [pc, #384]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0xe8>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d075      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eda:	4b59      	ldr	r3, [pc, #356]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee4:	4b56      	ldr	r3, [pc, #344]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_OscConfig+0x136>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_OscConfig+0x13c>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d11f      	bne.n	8001f40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f00:	4b4f      	ldr	r3, [pc, #316]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_OscConfig+0x154>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e25d      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b49      	ldr	r3, [pc, #292]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	4946      	ldr	r1, [pc, #280]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f2c:	4b45      	ldr	r3, [pc, #276]	@ (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8f5 	bl	8001120 <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d043      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e249      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f930 	bl	80011b8 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff f92c 	bl	80011b8 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e232      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6e:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	061b      	lsls	r3, r3, #24
 8001f88:	492d      	ldr	r1, [pc, #180]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
 8001f8e:	e01a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f90c 	bl	80011b8 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff f908 	bl	80011b8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e20e      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1e0>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d041      	beq.n	8002056 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01c      	beq.n	8002014 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe0:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff f8e5 	bl	80011b8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff f8e1 	bl	80011b8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1e7      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0ef      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x22e>
 8002012:	e020      	b.n	8002056 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800201a:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7ff f8c8 	bl	80011b8 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800202a:	e00d      	b.n	8002048 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff f8c4 	bl	80011b8 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d906      	bls.n	8002048 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1ca      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002048:	4b8c      	ldr	r3, [pc, #560]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1ea      	bne.n	800202c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80a6 	beq.w	80021b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002068:	4b84      	ldr	r3, [pc, #528]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_OscConfig+0x2b4>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x2b6>
 8002078:	2300      	movs	r3, #0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b7f      	ldr	r3, [pc, #508]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	4a7e      	ldr	r2, [pc, #504]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6593      	str	r3, [r2, #88]	@ 0x58
 800208a:	4b7c      	ldr	r3, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209a:	4b79      	ldr	r3, [pc, #484]	@ (8002280 <HAL_RCC_OscConfig+0x4bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a6:	4b76      	ldr	r3, [pc, #472]	@ (8002280 <HAL_RCC_OscConfig+0x4bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a75      	ldr	r2, [pc, #468]	@ (8002280 <HAL_RCC_OscConfig+0x4bc>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7ff f881 	bl	80011b8 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7ff f87d 	bl	80011b8 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e183      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002280 <HAL_RCC_OscConfig+0x4bc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d108      	bne.n	80020f2 <HAL_RCC_OscConfig+0x32e>
 80020e0:	4b66      	ldr	r3, [pc, #408]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	4a65      	ldr	r2, [pc, #404]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020f0:	e024      	b.n	800213c <HAL_RCC_OscConfig+0x378>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d110      	bne.n	800211c <HAL_RCC_OscConfig+0x358>
 80020fa:	4b60      	ldr	r3, [pc, #384]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002100:	4a5e      	ldr	r2, [pc, #376]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800210a:	4b5c      	ldr	r3, [pc, #368]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002110:	4a5a      	ldr	r2, [pc, #360]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800211a:	e00f      	b.n	800213c <HAL_RCC_OscConfig+0x378>
 800211c:	4b57      	ldr	r3, [pc, #348]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002122:	4a56      	ldr	r2, [pc, #344]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800212c:	4b53      	ldr	r3, [pc, #332]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	4a52      	ldr	r2, [pc, #328]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d016      	beq.n	8002172 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7ff f838 	bl	80011b8 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7ff f834 	bl	80011b8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e138      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	4b46      	ldr	r3, [pc, #280]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ed      	beq.n	800214c <HAL_RCC_OscConfig+0x388>
 8002170:	e015      	b.n	800219e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7ff f821 	bl	80011b8 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff f81d 	bl	80011b8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e121      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002190:	4b3a      	ldr	r3, [pc, #232]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ed      	bne.n	800217a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b35      	ldr	r3, [pc, #212]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	4a34      	ldr	r2, [pc, #208]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03c      	beq.n	8002236 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021c4:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021ca:	4a2c      	ldr	r2, [pc, #176]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7fe fff0 	bl	80011b8 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021dc:	f7fe ffec 	bl	80011b8 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0f2      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ee:	4b23      	ldr	r3, [pc, #140]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ef      	beq.n	80021dc <HAL_RCC_OscConfig+0x418>
 80021fc:	e01b      	b.n	8002236 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021fe:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002200:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002204:	4a1d      	ldr	r2, [pc, #116]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe ffd3 	bl	80011b8 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002216:	f7fe ffcf 	bl	80011b8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0d5      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800222a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1ef      	bne.n	8002216 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80c9 	beq.w	80023d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b0c      	cmp	r3, #12
 800224a:	f000 8083 	beq.w	8002354 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d15e      	bne.n	8002314 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a08      	ldr	r2, [pc, #32]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800225c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe ffa9 	bl	80011b8 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	e00c      	b.n	8002284 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe ffa5 	bl	80011b8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d905      	bls.n	8002284 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0ab      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002284:	4b55      	ldr	r3, [pc, #340]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ec      	bne.n	800226a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002290:	4b52      	ldr	r3, [pc, #328]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	4b52      	ldr	r3, [pc, #328]	@ (80023e0 <HAL_RCC_OscConfig+0x61c>)
 8002296:	4013      	ands	r3, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6a11      	ldr	r1, [r2, #32]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022a0:	3a01      	subs	r2, #1
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80022aa:	0212      	lsls	r2, r2, #8
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022b2:	0852      	lsrs	r2, r2, #1
 80022b4:	3a01      	subs	r2, #1
 80022b6:	0552      	lsls	r2, r2, #21
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022be:	0852      	lsrs	r2, r2, #1
 80022c0:	3a01      	subs	r2, #1
 80022c2:	0652      	lsls	r2, r2, #25
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022ca:	06d2      	lsls	r2, r2, #27
 80022cc:	430a      	orrs	r2, r1
 80022ce:	4943      	ldr	r1, [pc, #268]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a40      	ldr	r2, [pc, #256]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e0:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a3d      	ldr	r2, [pc, #244]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe ff64 	bl	80011b8 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe ff60 	bl	80011b8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e066      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	4b35      	ldr	r3, [pc, #212]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x530>
 8002312:	e05e      	b.n	80023d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a30      	ldr	r2, [pc, #192]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe ff4a 	bl	80011b8 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe ff46 	bl	80011b8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e04c      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233a:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002346:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4924      	ldr	r1, [pc, #144]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <HAL_RCC_OscConfig+0x620>)
 800234e:	4013      	ands	r3, r2
 8002350:	60cb      	str	r3, [r1, #12]
 8002352:	e03e      	b.n	80023d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e039      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002360:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	429a      	cmp	r2, r3
 8002372:	d12c      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	3b01      	subs	r3, #1
 8002380:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d123      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d11b      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d113      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	3b01      	subs	r3, #1
 80023c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	019f800c 	.word	0x019f800c
 80023e4:	feeefffc 	.word	0xfeeefffc

080023e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e11e      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b91      	ldr	r3, [pc, #580]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d910      	bls.n	8002430 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b8e      	ldr	r3, [pc, #568]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 020f 	bic.w	r2, r3, #15
 8002416:	498c      	ldr	r1, [pc, #560]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b8a      	ldr	r3, [pc, #552]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e106      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d073      	beq.n	8002524 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d129      	bne.n	8002498 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002444:	4b81      	ldr	r3, [pc, #516]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0f4      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002454:	f000 f99e 	bl	8002794 <RCC_GetSysClockFreqFromPLLSource>
 8002458:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4a7c      	ldr	r2, [pc, #496]	@ (8002650 <HAL_RCC_ClockConfig+0x268>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d93f      	bls.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002462:	4b7a      	ldr	r3, [pc, #488]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002476:	2b00      	cmp	r3, #0
 8002478:	d033      	beq.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d12f      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002482:	4b72      	ldr	r3, [pc, #456]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800248a:	4a70      	ldr	r2, [pc, #448]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800248c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002490:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e024      	b.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a0:	4b6a      	ldr	r3, [pc, #424]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0c6      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b0:	4b66      	ldr	r3, [pc, #408]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0be      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024c0:	f000 f8ce 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4a61      	ldr	r2, [pc, #388]	@ (8002650 <HAL_RCC_ClockConfig+0x268>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d909      	bls.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ce:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024d6:	4a5d      	ldr	r2, [pc, #372]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4957      	ldr	r1, [pc, #348]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe fe60 	bl	80011b8 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe fe5c 	bl	80011b8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e095      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800253c:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a42      	ldr	r2, [pc, #264]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002542:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002546:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002554:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800255c:	4a3b      	ldr	r2, [pc, #236]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800255e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002562:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b39      	ldr	r3, [pc, #228]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4936      	ldr	r1, [pc, #216]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
 8002576:	e008      	b.n	800258a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d105      	bne.n	800258a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800257e:	4b33      	ldr	r3, [pc, #204]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4a32      	ldr	r2, [pc, #200]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002584:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002588:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258a:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d21d      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002598:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 020f 	bic.w	r2, r3, #15
 80025a0:	4929      	ldr	r1, [pc, #164]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fe06 	bl	80011b8 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7fe fe02 	bl	80011b8 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e03b      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1ed      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4917      	ldr	r1, [pc, #92]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fe:	4b13      	ldr	r3, [pc, #76]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490f      	ldr	r1, [pc, #60]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002612:	f000 f825 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490c      	ldr	r1, [pc, #48]	@ (8002654 <HAL_RCC_ClockConfig+0x26c>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <HAL_RCC_ClockConfig+0x270>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_RCC_ClockConfig+0x274>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fd72 	bl	8001120 <HAL_InitTick>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	04c4b400 	.word	0x04c4b400
 8002654:	08006f7c 	.word	0x08006f7c
 8002658:	20000000 	.word	0x20000000
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d102      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002672:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e047      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002678:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d102      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002684:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	e03e      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d136      	bne.n	8002704 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3301      	adds	r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d10c      	bne.n	80026ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	4a16      	ldr	r2, [pc, #88]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026be:	68d2      	ldr	r2, [r2, #12]
 80026c0:	0a12      	lsrs	r2, r2, #8
 80026c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	617b      	str	r3, [r7, #20]
      break;
 80026cc:	e00c      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ce:	4a13      	ldr	r2, [pc, #76]	@ (800271c <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4a10      	ldr	r2, [pc, #64]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d8:	68d2      	ldr	r2, [r2, #12]
 80026da:	0a12      	lsrs	r2, r2, #8
 80026dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026e0:	fb02 f303 	mul.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
      break;
 80026e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0e5b      	lsrs	r3, r3, #25
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	3301      	adds	r3, #1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	e001      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002708:	693b      	ldr	r3, [r7, #16]
}
 800270a:	4618      	mov	r0, r3
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	00f42400 	.word	0x00f42400
 8002720:	016e3600 	.word	0x016e3600

08002724 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <HAL_RCC_GetHCLKFreq+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002740:	f7ff fff0 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4904      	ldr	r1, [pc, #16]	@ (8002764 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08006f8c 	.word	0x08006f8c

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800276c:	f7ff ffda 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0adb      	lsrs	r3, r3, #11
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4904      	ldr	r1, [pc, #16]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x28>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	08006f8c 	.word	0x08006f8c

08002794 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800279a:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	3301      	adds	r3, #1
 80027b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d10c      	bne.n	80027d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b8:	4a17      	ldr	r2, [pc, #92]	@ (8002818 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	4a14      	ldr	r2, [pc, #80]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027c2:	68d2      	ldr	r2, [r2, #12]
 80027c4:	0a12      	lsrs	r2, r2, #8
 80027c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	617b      	str	r3, [r7, #20]
    break;
 80027d0:	e00c      	b.n	80027ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027d2:	4a12      	ldr	r2, [pc, #72]	@ (800281c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4a0e      	ldr	r2, [pc, #56]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027dc:	68d2      	ldr	r2, [r2, #12]
 80027de:	0a12      	lsrs	r2, r2, #8
 80027e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    break;
 80027ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0e5b      	lsrs	r3, r3, #25
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	3301      	adds	r3, #1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002806:	687b      	ldr	r3, [r7, #4]
}
 8002808:	4618      	mov	r0, r3
 800280a:	371c      	adds	r7, #28
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000
 8002818:	016e3600 	.word	0x016e3600
 800281c:	00f42400 	.word	0x00f42400

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002828:	2300      	movs	r3, #0
 800282a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800282c:	2300      	movs	r3, #0
 800282e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 8098 	beq.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002842:	4b43      	ldr	r3, [pc, #268]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10d      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	4b40      	ldr	r3, [pc, #256]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	4a3f      	ldr	r2, [pc, #252]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002858:	6593      	str	r3, [r2, #88]	@ 0x58
 800285a:	4b3d      	ldr	r3, [pc, #244]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800286a:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a39      	ldr	r2, [pc, #228]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002876:	f7fe fc9f 	bl	80011b8 <HAL_GetTick>
 800287a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287c:	e009      	b.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fc9b 	bl	80011b8 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d902      	bls.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	74fb      	strb	r3, [r7, #19]
        break;
 8002890:	e005      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002892:	4b30      	ldr	r3, [pc, #192]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0ef      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800289e:	7cfb      	ldrb	r3, [r7, #19]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d159      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01e      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d019      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c0:	4b23      	ldr	r3, [pc, #140]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028cc:	4b20      	ldr	r3, [pc, #128]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ec:	4a18      	ldr	r2, [pc, #96]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fc5b 	bl	80011b8 <HAL_GetTick>
 8002902:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002904:	e00b      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fc57 	bl	80011b8 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d902      	bls.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	74fb      	strb	r3, [r7, #19]
            break;
 800291c:	e006      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291e:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ec      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10b      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002938:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	4903      	ldr	r1, [pc, #12]	@ (8002950 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002948:	e008      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800294a:	7cfb      	ldrb	r3, [r7, #19]
 800294c:	74bb      	strb	r3, [r7, #18]
 800294e:	e005      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002950:	40021000 	.word	0x40021000
 8002954:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800295c:	7c7b      	ldrb	r3, [r7, #17]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d105      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002962:	4ba6      	ldr	r3, [pc, #664]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	4aa5      	ldr	r2, [pc, #660]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002968:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800296c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800297a:	4ba0      	ldr	r3, [pc, #640]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002980:	f023 0203 	bic.w	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	499c      	ldr	r1, [pc, #624]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800299c:	4b97      	ldr	r3, [pc, #604]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	f023 020c 	bic.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	4994      	ldr	r1, [pc, #592]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029be:	4b8f      	ldr	r3, [pc, #572]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	498b      	ldr	r1, [pc, #556]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029e0:	4b86      	ldr	r3, [pc, #536]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	4983      	ldr	r1, [pc, #524]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a02:	4b7e      	ldr	r3, [pc, #504]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	497a      	ldr	r1, [pc, #488]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a24:	4b75      	ldr	r3, [pc, #468]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	4972      	ldr	r1, [pc, #456]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a46:	4b6d      	ldr	r3, [pc, #436]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	4969      	ldr	r1, [pc, #420]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a68:	4b64      	ldr	r3, [pc, #400]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4961      	ldr	r1, [pc, #388]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	4958      	ldr	r1, [pc, #352]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aac:	4b53      	ldr	r3, [pc, #332]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	4950      	ldr	r1, [pc, #320]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002acc:	4b4b      	ldr	r3, [pc, #300]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a4a      	ldr	r2, [pc, #296]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ae4:	4b45      	ldr	r3, [pc, #276]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	4942      	ldr	r1, [pc, #264]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b02:	d105      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b04:	4b3d      	ldr	r3, [pc, #244]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a3c      	ldr	r2, [pc, #240]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b0e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b1c:	4b37      	ldr	r3, [pc, #220]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	4934      	ldr	r1, [pc, #208]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a2e      	ldr	r2, [pc, #184]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b54:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b62:	4926      	ldr	r1, [pc, #152]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b72:	d105      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b74:	4b21      	ldr	r3, [pc, #132]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4a20      	ldr	r2, [pc, #128]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d015      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	4918      	ldr	r1, [pc, #96]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bac:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002be2:	d105      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002be4:	4b05      	ldr	r3, [pc, #20]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a04      	ldr	r2, [pc, #16]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e049      	b.n	8002ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe f820 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f000 fc08 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d001      	beq.n	8002cc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e042      	b.n	8002d4e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a21      	ldr	r2, [pc, #132]	@ (8002d5c <HAL_TIM_Base_Start+0xac>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d018      	beq.n	8002d0c <HAL_TIM_Base_Start+0x5c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce2:	d013      	beq.n	8002d0c <HAL_TIM_Base_Start+0x5c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d60 <HAL_TIM_Base_Start+0xb0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00e      	beq.n	8002d0c <HAL_TIM_Base_Start+0x5c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d64 <HAL_TIM_Base_Start+0xb4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d009      	beq.n	8002d0c <HAL_TIM_Base_Start+0x5c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8002d68 <HAL_TIM_Base_Start+0xb8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_TIM_Base_Start+0x5c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a19      	ldr	r2, [pc, #100]	@ (8002d6c <HAL_TIM_Base_Start+0xbc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d115      	bne.n	8002d38 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_TIM_Base_Start+0xc0>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d015      	beq.n	8002d4a <HAL_TIM_Base_Start+0x9a>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d24:	d011      	beq.n	8002d4a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d36:	e008      	b.n	8002d4a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e000      	b.n	8002d4c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40013400 	.word	0x40013400
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	00010007 	.word	0x00010007

08002d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e049      	b.n	8002e1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f841 	bl	8002e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f000 fb4e 	bl	8003454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d109      	bne.n	8002e5c <HAL_TIM_PWM_Start+0x24>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	bf14      	ite	ne
 8002e54:	2301      	movne	r3, #1
 8002e56:	2300      	moveq	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e03c      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d109      	bne.n	8002e76 <HAL_TIM_PWM_Start+0x3e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	e02f      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d109      	bne.n	8002e90 <HAL_TIM_PWM_Start+0x58>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e022      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d109      	bne.n	8002eaa <HAL_TIM_PWM_Start+0x72>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e015      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b10      	cmp	r3, #16
 8002eae:	d109      	bne.n	8002ec4 <HAL_TIM_PWM_Start+0x8c>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e008      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x9e>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e097      	b.n	800300e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_PWM_Start+0xb6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002eec:	e023      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_PWM_Start+0xc6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002efc:	e01b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0xd6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f0c:	e013      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_PWM_Start+0xe6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f1c:	e00b      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_PWM_Start+0xf6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f2c:	e003      	b.n	8002f36 <HAL_TIM_PWM_Start+0xfe>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	6839      	ldr	r1, [r7, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 feb6 	bl	8003cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a33      	ldr	r2, [pc, #204]	@ (8003018 <HAL_TIM_PWM_Start+0x1e0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d013      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x13e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a32      	ldr	r2, [pc, #200]	@ (800301c <HAL_TIM_PWM_Start+0x1e4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x13e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a30      	ldr	r2, [pc, #192]	@ (8003020 <HAL_TIM_PWM_Start+0x1e8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x13e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a2f      	ldr	r2, [pc, #188]	@ (8003024 <HAL_TIM_PWM_Start+0x1ec>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_TIM_PWM_Start+0x13e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a2d      	ldr	r2, [pc, #180]	@ (8003028 <HAL_TIM_PWM_Start+0x1f0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x142>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_TIM_PWM_Start+0x144>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <HAL_TIM_PWM_Start+0x1e0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_TIM_PWM_Start+0x194>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa2:	d013      	beq.n	8002fcc <HAL_TIM_PWM_Start+0x194>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a20      	ldr	r2, [pc, #128]	@ (800302c <HAL_TIM_PWM_Start+0x1f4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_PWM_Start+0x194>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003030 <HAL_TIM_PWM_Start+0x1f8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_TIM_PWM_Start+0x194>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a17      	ldr	r2, [pc, #92]	@ (800301c <HAL_TIM_PWM_Start+0x1e4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_TIM_PWM_Start+0x194>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	@ (8003020 <HAL_TIM_PWM_Start+0x1e8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d115      	bne.n	8002ff8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	4b18      	ldr	r3, [pc, #96]	@ (8003034 <HAL_TIM_PWM_Start+0x1fc>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d015      	beq.n	800300a <HAL_TIM_PWM_Start+0x1d2>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe4:	d011      	beq.n	800300a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff6:	e008      	b.n	800300a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e000      	b.n	800300c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800300a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40012c00 	.word	0x40012c00
 800301c:	40013400 	.word	0x40013400
 8003020:	40014000 	.word	0x40014000
 8003024:	40014400 	.word	0x40014400
 8003028:	40014800 	.word	0x40014800
 800302c:	40000400 	.word	0x40000400
 8003030:	40000800 	.word	0x40000800
 8003034:	00010007 	.word	0x00010007

08003038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d101      	bne.n	8003056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003052:	2302      	movs	r3, #2
 8003054:	e0ff      	b.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b14      	cmp	r3, #20
 8003062:	f200 80f0 	bhi.w	8003246 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	080030c1 	.word	0x080030c1
 8003070:	08003247 	.word	0x08003247
 8003074:	08003247 	.word	0x08003247
 8003078:	08003247 	.word	0x08003247
 800307c:	08003101 	.word	0x08003101
 8003080:	08003247 	.word	0x08003247
 8003084:	08003247 	.word	0x08003247
 8003088:	08003247 	.word	0x08003247
 800308c:	08003143 	.word	0x08003143
 8003090:	08003247 	.word	0x08003247
 8003094:	08003247 	.word	0x08003247
 8003098:	08003247 	.word	0x08003247
 800309c:	08003183 	.word	0x08003183
 80030a0:	08003247 	.word	0x08003247
 80030a4:	08003247 	.word	0x08003247
 80030a8:	08003247 	.word	0x08003247
 80030ac:	080031c5 	.word	0x080031c5
 80030b0:	08003247 	.word	0x08003247
 80030b4:	08003247 	.word	0x08003247
 80030b8:	08003247 	.word	0x08003247
 80030bc:	08003205 	.word	0x08003205
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fa60 	bl	800358c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0208 	orr.w	r2, r2, #8
 80030da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0204 	bic.w	r2, r2, #4
 80030ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6999      	ldr	r1, [r3, #24]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	691a      	ldr	r2, [r3, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	619a      	str	r2, [r3, #24]
      break;
 80030fe:	e0a5      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fad0 	bl	80036ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800311a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800312a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6999      	ldr	r1, [r3, #24]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	021a      	lsls	r2, r3, #8
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	619a      	str	r2, [r3, #24]
      break;
 8003140:	e084      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f000 fb39 	bl	80037c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69da      	ldr	r2, [r3, #28]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0208 	orr.w	r2, r2, #8
 800315c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69da      	ldr	r2, [r3, #28]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0204 	bic.w	r2, r2, #4
 800316c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69d9      	ldr	r1, [r3, #28]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	61da      	str	r2, [r3, #28]
      break;
 8003180:	e064      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fba1 	bl	80038d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800319c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69da      	ldr	r2, [r3, #28]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69d9      	ldr	r1, [r3, #28]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	021a      	lsls	r2, r3, #8
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	61da      	str	r2, [r3, #28]
      break;
 80031c2:	e043      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fc0a 	bl	80039e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0204 	bic.w	r2, r2, #4
 80031ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003202:	e023      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fc4e 	bl	8003aac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800321e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800322e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	021a      	lsls	r2, r3, #8
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003244:	e002      	b.n	800324c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
      break;
 800324a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop

08003260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_TIM_ConfigClockSource+0x1c>
 8003278:	2302      	movs	r3, #2
 800327a:	e0de      	b.n	800343a <HAL_TIM_ConfigClockSource+0x1da>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800329a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800329e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a63      	ldr	r2, [pc, #396]	@ (8003444 <HAL_TIM_ConfigClockSource+0x1e4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	f000 80a9 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032bc:	4a61      	ldr	r2, [pc, #388]	@ (8003444 <HAL_TIM_ConfigClockSource+0x1e4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	f200 80ae 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 80032c4:	4a60      	ldr	r2, [pc, #384]	@ (8003448 <HAL_TIM_ConfigClockSource+0x1e8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f000 80a1 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003448 <HAL_TIM_ConfigClockSource+0x1e8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	f200 80a6 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 80032d4:	4a5d      	ldr	r2, [pc, #372]	@ (800344c <HAL_TIM_ConfigClockSource+0x1ec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f000 8099 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032dc:	4a5b      	ldr	r2, [pc, #364]	@ (800344c <HAL_TIM_ConfigClockSource+0x1ec>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	f200 809e 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 80032e4:	4a5a      	ldr	r2, [pc, #360]	@ (8003450 <HAL_TIM_ConfigClockSource+0x1f0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	f000 8091 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032ec:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <HAL_TIM_ConfigClockSource+0x1f0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	f200 8096 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 80032f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80032f8:	f000 8089 	beq.w	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 80032fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003300:	f200 808e 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003308:	d03e      	beq.n	8003388 <HAL_TIM_ConfigClockSource+0x128>
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330e:	f200 8087 	bhi.w	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003316:	f000 8086 	beq.w	8003426 <HAL_TIM_ConfigClockSource+0x1c6>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331e:	d87f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003320:	2b70      	cmp	r3, #112	@ 0x70
 8003322:	d01a      	beq.n	800335a <HAL_TIM_ConfigClockSource+0xfa>
 8003324:	2b70      	cmp	r3, #112	@ 0x70
 8003326:	d87b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003328:	2b60      	cmp	r3, #96	@ 0x60
 800332a:	d050      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0x16e>
 800332c:	2b60      	cmp	r3, #96	@ 0x60
 800332e:	d877      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003330:	2b50      	cmp	r3, #80	@ 0x50
 8003332:	d03c      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0x14e>
 8003334:	2b50      	cmp	r3, #80	@ 0x50
 8003336:	d873      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003338:	2b40      	cmp	r3, #64	@ 0x40
 800333a:	d058      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x18e>
 800333c:	2b40      	cmp	r3, #64	@ 0x40
 800333e:	d86f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003340:	2b30      	cmp	r3, #48	@ 0x30
 8003342:	d064      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 8003344:	2b30      	cmp	r3, #48	@ 0x30
 8003346:	d86b      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d060      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 800334c:	2b20      	cmp	r3, #32
 800334e:	d867      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d05c      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 8003354:	2b10      	cmp	r3, #16
 8003356:	d05a      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x1ae>
 8003358:	e062      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	f000 fc81 	bl	8003c70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800337c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	609a      	str	r2, [r3, #8]
      break;
 8003386:	e04f      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003398:	f000 fc6a 	bl	8003c70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033aa:	609a      	str	r2, [r3, #8]
      break;
 80033ac:	e03c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ba:	461a      	mov	r2, r3
 80033bc:	f000 fbdc 	bl	8003b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2150      	movs	r1, #80	@ 0x50
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fc35 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 80033cc:	e02c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 fbfb 	bl	8003bd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2160      	movs	r1, #96	@ 0x60
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fc25 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 80033ec:	e01c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 fbbc 	bl	8003b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2140      	movs	r1, #64	@ 0x40
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fc15 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 800340c:	e00c      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4610      	mov	r0, r2
 800341a:	f000 fc0c 	bl	8003c36 <TIM_ITRx_SetConfig>
      break;
 800341e:	e003      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	73fb      	strb	r3, [r7, #15]
      break;
 8003424:	e000      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	00100070 	.word	0x00100070
 8003448:	00100040 	.word	0x00100040
 800344c:	00100030 	.word	0x00100030
 8003450:	00100020 	.word	0x00100020

08003454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a42      	ldr	r2, [pc, #264]	@ (8003570 <TIM_Base_SetConfig+0x11c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00f      	beq.n	800348c <TIM_Base_SetConfig+0x38>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003472:	d00b      	beq.n	800348c <TIM_Base_SetConfig+0x38>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3f      	ldr	r2, [pc, #252]	@ (8003574 <TIM_Base_SetConfig+0x120>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d007      	beq.n	800348c <TIM_Base_SetConfig+0x38>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3e      	ldr	r2, [pc, #248]	@ (8003578 <TIM_Base_SetConfig+0x124>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d003      	beq.n	800348c <TIM_Base_SetConfig+0x38>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a3d      	ldr	r2, [pc, #244]	@ (800357c <TIM_Base_SetConfig+0x128>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d108      	bne.n	800349e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <TIM_Base_SetConfig+0x11c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01b      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ac:	d017      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a30      	ldr	r2, [pc, #192]	@ (8003574 <TIM_Base_SetConfig+0x120>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2f      	ldr	r2, [pc, #188]	@ (8003578 <TIM_Base_SetConfig+0x124>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00f      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2e      	ldr	r2, [pc, #184]	@ (800357c <TIM_Base_SetConfig+0x128>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00b      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003580 <TIM_Base_SetConfig+0x12c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003584 <TIM_Base_SetConfig+0x130>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d003      	beq.n	80034de <TIM_Base_SetConfig+0x8a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003588 <TIM_Base_SetConfig+0x134>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d108      	bne.n	80034f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a16      	ldr	r2, [pc, #88]	@ (8003570 <TIM_Base_SetConfig+0x11c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00f      	beq.n	800353c <TIM_Base_SetConfig+0xe8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a17      	ldr	r2, [pc, #92]	@ (800357c <TIM_Base_SetConfig+0x128>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0xe8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a16      	ldr	r2, [pc, #88]	@ (8003580 <TIM_Base_SetConfig+0x12c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d007      	beq.n	800353c <TIM_Base_SetConfig+0xe8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a15      	ldr	r2, [pc, #84]	@ (8003584 <TIM_Base_SetConfig+0x130>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d003      	beq.n	800353c <TIM_Base_SetConfig+0xe8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a14      	ldr	r2, [pc, #80]	@ (8003588 <TIM_Base_SetConfig+0x134>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d103      	bne.n	8003544 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d105      	bne.n	8003562 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f023 0201 	bic.w	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]
  }
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40013400 	.word	0x40013400
 8003580:	40014000 	.word	0x40014000
 8003584:	40014400 	.word	0x40014400
 8003588:	40014800 	.word	0x40014800

0800358c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f023 0201 	bic.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f023 0302 	bic.w	r3, r3, #2
 80035d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a2c      	ldr	r2, [pc, #176]	@ (8003698 <TIM_OC1_SetConfig+0x10c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00f      	beq.n	800360c <TIM_OC1_SetConfig+0x80>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a2b      	ldr	r2, [pc, #172]	@ (800369c <TIM_OC1_SetConfig+0x110>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00b      	beq.n	800360c <TIM_OC1_SetConfig+0x80>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a2a      	ldr	r2, [pc, #168]	@ (80036a0 <TIM_OC1_SetConfig+0x114>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d007      	beq.n	800360c <TIM_OC1_SetConfig+0x80>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a29      	ldr	r2, [pc, #164]	@ (80036a4 <TIM_OC1_SetConfig+0x118>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d003      	beq.n	800360c <TIM_OC1_SetConfig+0x80>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a28      	ldr	r2, [pc, #160]	@ (80036a8 <TIM_OC1_SetConfig+0x11c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d10c      	bne.n	8003626 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f023 0308 	bic.w	r3, r3, #8
 8003612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f023 0304 	bic.w	r3, r3, #4
 8003624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a1b      	ldr	r2, [pc, #108]	@ (8003698 <TIM_OC1_SetConfig+0x10c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00f      	beq.n	800364e <TIM_OC1_SetConfig+0xc2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a1a      	ldr	r2, [pc, #104]	@ (800369c <TIM_OC1_SetConfig+0x110>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_OC1_SetConfig+0xc2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a19      	ldr	r2, [pc, #100]	@ (80036a0 <TIM_OC1_SetConfig+0x114>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_OC1_SetConfig+0xc2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <TIM_OC1_SetConfig+0x118>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_OC1_SetConfig+0xc2>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <TIM_OC1_SetConfig+0x11c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d111      	bne.n	8003672 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800365c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	621a      	str	r2, [r3, #32]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40013400 	.word	0x40013400
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800

080036ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 0210 	bic.w	r2, r3, #16
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f023 0320 	bic.w	r3, r3, #32
 80036fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a28      	ldr	r2, [pc, #160]	@ (80037ac <TIM_OC2_SetConfig+0x100>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_OC2_SetConfig+0x6c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a27      	ldr	r2, [pc, #156]	@ (80037b0 <TIM_OC2_SetConfig+0x104>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10d      	bne.n	8003734 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800371e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1d      	ldr	r2, [pc, #116]	@ (80037ac <TIM_OC2_SetConfig+0x100>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00f      	beq.n	800375c <TIM_OC2_SetConfig+0xb0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a1c      	ldr	r2, [pc, #112]	@ (80037b0 <TIM_OC2_SetConfig+0x104>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00b      	beq.n	800375c <TIM_OC2_SetConfig+0xb0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1b      	ldr	r2, [pc, #108]	@ (80037b4 <TIM_OC2_SetConfig+0x108>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d007      	beq.n	800375c <TIM_OC2_SetConfig+0xb0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1a      	ldr	r2, [pc, #104]	@ (80037b8 <TIM_OC2_SetConfig+0x10c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <TIM_OC2_SetConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a19      	ldr	r2, [pc, #100]	@ (80037bc <TIM_OC2_SetConfig+0x110>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d113      	bne.n	8003784 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800376a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	621a      	str	r2, [r3, #32]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40012c00 	.word	0x40012c00
 80037b0:	40013400 	.word	0x40013400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40014400 	.word	0x40014400
 80037bc:	40014800 	.word	0x40014800

080037c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800380c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a27      	ldr	r2, [pc, #156]	@ (80038bc <TIM_OC3_SetConfig+0xfc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_OC3_SetConfig+0x6a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a26      	ldr	r2, [pc, #152]	@ (80038c0 <TIM_OC3_SetConfig+0x100>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10d      	bne.n	8003846 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <TIM_OC3_SetConfig+0xfc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <TIM_OC3_SetConfig+0xae>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1b      	ldr	r2, [pc, #108]	@ (80038c0 <TIM_OC3_SetConfig+0x100>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_OC3_SetConfig+0xae>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a1a      	ldr	r2, [pc, #104]	@ (80038c4 <TIM_OC3_SetConfig+0x104>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <TIM_OC3_SetConfig+0xae>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a19      	ldr	r2, [pc, #100]	@ (80038c8 <TIM_OC3_SetConfig+0x108>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_OC3_SetConfig+0xae>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a18      	ldr	r2, [pc, #96]	@ (80038cc <TIM_OC3_SetConfig+0x10c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d113      	bne.n	8003896 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	621a      	str	r2, [r3, #32]
}
 80038b0:	bf00      	nop
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	40012c00 	.word	0x40012c00
 80038c0:	40013400 	.word	0x40013400
 80038c4:	40014000 	.word	0x40014000
 80038c8:	40014400 	.word	0x40014400
 80038cc:	40014800 	.word	0x40014800

080038d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800390a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4313      	orrs	r3, r2
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800391e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	031b      	lsls	r3, r3, #12
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a28      	ldr	r2, [pc, #160]	@ (80039d0 <TIM_OC4_SetConfig+0x100>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_OC4_SetConfig+0x6c>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a27      	ldr	r2, [pc, #156]	@ (80039d4 <TIM_OC4_SetConfig+0x104>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d10d      	bne.n	8003958 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	031b      	lsls	r3, r3, #12
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4313      	orrs	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003956:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1d      	ldr	r2, [pc, #116]	@ (80039d0 <TIM_OC4_SetConfig+0x100>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00f      	beq.n	8003980 <TIM_OC4_SetConfig+0xb0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1c      	ldr	r2, [pc, #112]	@ (80039d4 <TIM_OC4_SetConfig+0x104>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_OC4_SetConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1b      	ldr	r2, [pc, #108]	@ (80039d8 <TIM_OC4_SetConfig+0x108>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_OC4_SetConfig+0xb0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <TIM_OC4_SetConfig+0x10c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_OC4_SetConfig+0xb0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <TIM_OC4_SetConfig+0x110>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d113      	bne.n	80039a8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003986:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800398e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	019b      	lsls	r3, r3, #6
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	621a      	str	r2, [r3, #32]
}
 80039c2:	bf00      	nop
 80039c4:	371c      	adds	r7, #28
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	40013400 	.word	0x40013400
 80039d8:	40014000 	.word	0x40014000
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800

080039e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	041b      	lsls	r3, r3, #16
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a17      	ldr	r2, [pc, #92]	@ (8003a98 <TIM_OC5_SetConfig+0xb4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00f      	beq.n	8003a5e <TIM_OC5_SetConfig+0x7a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a16      	ldr	r2, [pc, #88]	@ (8003a9c <TIM_OC5_SetConfig+0xb8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <TIM_OC5_SetConfig+0x7a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a15      	ldr	r2, [pc, #84]	@ (8003aa0 <TIM_OC5_SetConfig+0xbc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <TIM_OC5_SetConfig+0x7a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a14      	ldr	r2, [pc, #80]	@ (8003aa4 <TIM_OC5_SetConfig+0xc0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d003      	beq.n	8003a5e <TIM_OC5_SetConfig+0x7a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a13      	ldr	r2, [pc, #76]	@ (8003aa8 <TIM_OC5_SetConfig+0xc4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d109      	bne.n	8003a72 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	621a      	str	r2, [r3, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40013400 	.word	0x40013400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	40014800 	.word	0x40014800

08003aac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	051b      	lsls	r3, r3, #20
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a18      	ldr	r2, [pc, #96]	@ (8003b64 <TIM_OC6_SetConfig+0xb8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00f      	beq.n	8003b28 <TIM_OC6_SetConfig+0x7c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	@ (8003b68 <TIM_OC6_SetConfig+0xbc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <TIM_OC6_SetConfig+0x7c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a16      	ldr	r2, [pc, #88]	@ (8003b6c <TIM_OC6_SetConfig+0xc0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d007      	beq.n	8003b28 <TIM_OC6_SetConfig+0x7c>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a15      	ldr	r2, [pc, #84]	@ (8003b70 <TIM_OC6_SetConfig+0xc4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_OC6_SetConfig+0x7c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a14      	ldr	r2, [pc, #80]	@ (8003b74 <TIM_OC6_SetConfig+0xc8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d109      	bne.n	8003b3c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	029b      	lsls	r3, r3, #10
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40013400 	.word	0x40013400
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800

08003b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 030a 	bic.w	r3, r3, #10
 8003bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b087      	sub	sp, #28
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	60f8      	str	r0, [r7, #12]
 8003bde:	60b9      	str	r1, [r7, #8]
 8003be0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 0210 	bic.w	r2, r3, #16
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	031b      	lsls	r3, r3, #12
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	621a      	str	r2, [r3, #32]
}
 8003c2a:	bf00      	nop
 8003c2c:	371c      	adds	r7, #28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f043 0307 	orr.w	r3, r3, #7
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	609a      	str	r2, [r3, #8]
}
 8003c64:	bf00      	nop
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	021a      	lsls	r2, r3, #8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	609a      	str	r2, [r3, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e065      	b.n	8003de0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2c      	ldr	r2, [pc, #176]	@ (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2b      	ldr	r2, [pc, #172]	@ (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d018      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d8a:	d013      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00e      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a17      	ldr	r2, [pc, #92]	@ (8003df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d009      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a12      	ldr	r2, [pc, #72]	@ (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10c      	bne.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40012c00 	.word	0x40012c00
 8003df0:	40013400 	.word	0x40013400
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40014000 	.word	0x40014000

08003e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e042      	b.n	8003e98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fd f80d 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2224      	movs	r2, #36	@ 0x24
 8003e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 ff26 	bl	8004c9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fc57 	bl	8004704 <UART_SetConfig>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d101      	bne.n	8003e60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e01b      	b.n	8003e98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 ffa5 	bl	8004de0 <UART_CheckIdleState>
 8003e96:	4603      	mov	r3, r0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	@ 0x28
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d17b      	bne.n	8003fb2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_UART_Transmit+0x26>
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e074      	b.n	8003fb4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2221      	movs	r2, #33	@ 0x21
 8003ed6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eda:	f7fd f96d 	bl	80011b8 <HAL_GetTick>
 8003ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	88fa      	ldrh	r2, [r7, #6]
 8003ee4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef8:	d108      	bne.n	8003f0c <HAL_UART_Transmit+0x6c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d104      	bne.n	8003f0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	e003      	b.n	8003f14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f14:	e030      	b.n	8003f78 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2180      	movs	r1, #128	@ 0x80
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f001 f807 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e03d      	b.n	8003fb4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	3302      	adds	r3, #2
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	e007      	b.n	8003f66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	781a      	ldrb	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	3301      	adds	r3, #1
 8003f64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1c8      	bne.n	8003f16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2140      	movs	r1, #64	@ 0x40
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 ffd0 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e006      	b.n	8003fb4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e000      	b.n	8003fb4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003fb2:	2302      	movs	r3, #2
  }
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	d137      	bne.n	8004044 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_UART_Receive_IT+0x24>
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e030      	b.n	8004046 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <HAL_UART_Receive_IT+0x94>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d01f      	beq.n	8004034 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	613b      	str	r3, [r7, #16]
   return(result);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004016:	627b      	str	r3, [r7, #36]	@ 0x24
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	69f9      	ldr	r1, [r7, #28]
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	61bb      	str	r3, [r7, #24]
   return(result);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004034:	88fb      	ldrh	r3, [r7, #6]
 8004036:	461a      	mov	r2, r3
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 ffe8 	bl	8005010 <UART_Start_Receive_IT>
 8004040:	4603      	mov	r3, r0
 8004042:	e000      	b.n	8004046 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3728      	adds	r7, #40	@ 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40008000 	.word	0x40008000

08004054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b0ba      	sub	sp, #232	@ 0xe8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800407a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800407e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004082:	4013      	ands	r3, r2
 8004084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004088:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800408c:	2b00      	cmp	r3, #0
 800408e:	d11b      	bne.n	80040c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b00      	cmp	r3, #0
 800409a:	d015      	beq.n	80040c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d105      	bne.n	80040b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8300 	beq.w	80046be <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
      }
      return;
 80040c6:	e2fa      	b.n	80046be <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80040c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 8123 	beq.w	8004318 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80040d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80040d6:	4b8d      	ldr	r3, [pc, #564]	@ (800430c <HAL_UART_IRQHandler+0x2b8>)
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80040de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80040e2:	4b8b      	ldr	r3, [pc, #556]	@ (8004310 <HAL_UART_IRQHandler+0x2bc>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8116 	beq.w	8004318 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d011      	beq.n	800411c <HAL_UART_IRQHandler+0xc8>
 80040f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2201      	movs	r2, #1
 800410a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004112:	f043 0201 	orr.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d011      	beq.n	800414c <HAL_UART_IRQHandler+0xf8>
 8004128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2202      	movs	r2, #2
 800413a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f043 0204 	orr.w	r2, r3, #4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d011      	beq.n	800417c <HAL_UART_IRQHandler+0x128>
 8004158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2204      	movs	r2, #4
 800416a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	f043 0202 	orr.w	r2, r3, #2
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d017      	beq.n	80041b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d105      	bne.n	80041a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004194:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004198:	4b5c      	ldr	r3, [pc, #368]	@ (800430c <HAL_UART_IRQHandler+0x2b8>)
 800419a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2208      	movs	r2, #8
 80041a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ae:	f043 0208 	orr.w	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d012      	beq.n	80041ea <HAL_UART_IRQHandler+0x196>
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00c      	beq.n	80041ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8266 	beq.w	80046c2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d013      	beq.n	800422a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b00      	cmp	r3, #0
 800420c:	d105      	bne.n	800421a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800420e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d007      	beq.n	800422a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004230:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423e:	2b40      	cmp	r3, #64	@ 0x40
 8004240:	d005      	beq.n	800424e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004246:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800424a:	2b00      	cmp	r3, #0
 800424c:	d054      	beq.n	80042f8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 f800 	bl	8005254 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425e:	2b40      	cmp	r3, #64	@ 0x40
 8004260:	d146      	bne.n	80042f0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3308      	adds	r3, #8
 8004268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004278:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800427c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004280:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3308      	adds	r3, #8
 800428a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800428e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800429a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1d9      	bne.n	8004262 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042be:	4a15      	ldr	r2, [pc, #84]	@ (8004314 <HAL_UART_IRQHandler+0x2c0>)
 80042c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fd f9b4 	bl	8001636 <HAL_DMA_Abort_IT>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d019      	beq.n	8004308 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80042e2:	4610      	mov	r0, r2
 80042e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e6:	e00f      	b.n	8004308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f9f5 	bl	80046d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ee:	e00b      	b.n	8004308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f9f1 	bl	80046d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f6:	e007      	b.n	8004308 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f9ed 	bl	80046d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004306:	e1dc      	b.n	80046c2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	bf00      	nop
    return;
 800430a:	e1da      	b.n	80046c2 <HAL_UART_IRQHandler+0x66e>
 800430c:	10000001 	.word	0x10000001
 8004310:	04000120 	.word	0x04000120
 8004314:	08005321 	.word	0x08005321

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800431c:	2b01      	cmp	r3, #1
 800431e:	f040 8170 	bne.w	8004602 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 8169 	beq.w	8004602 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8162 	beq.w	8004602 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2210      	movs	r2, #16
 8004344:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004350:	2b40      	cmp	r3, #64	@ 0x40
 8004352:	f040 80d8 	bne.w	8004506 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80af 	beq.w	80044cc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004374:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004378:	429a      	cmp	r2, r3
 800437a:	f080 80a7 	bcs.w	80044cc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004384:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 8087 	bne.w	80044aa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1da      	bne.n	800439c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3308      	adds	r3, #8
 80043ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800440a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800440e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004412:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800441c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e1      	bne.n	80043e6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004446:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004448:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800444c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e3      	bne.n	8004422 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004478:	f023 0310 	bic.w	r3, r3, #16
 800447c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800448a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800448c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004490:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e4      	bne.n	8004468 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd f86d 	bl	8001584 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80044bc:	b29b      	uxth	r3, r3
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f911 	bl	80046ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80044ca:	e0fc      	b.n	80046c6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044d6:	429a      	cmp	r2, r3
 80044d8:	f040 80f5 	bne.w	80046c6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	f040 80eb 	bne.w	80046c6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8f4 	bl	80046ec <HAL_UARTEx_RxEventCallback>
      return;
 8004504:	e0df      	b.n	80046c6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004512:	b29b      	uxth	r3, r3
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80d1 	beq.w	80046ca <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80cc 	beq.w	80046ca <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004546:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
 8004556:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800455a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e4      	bne.n	8004532 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	623b      	str	r3, [r7, #32]
   return(result);
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004590:	633a      	str	r2, [r7, #48]	@ 0x30
 8004592:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800459e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e1      	bne.n	8004568 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f023 0310 	bic.w	r3, r3, #16
 80045cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	69b9      	ldr	r1, [r7, #24]
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	617b      	str	r3, [r7, #20]
   return(result);
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e4      	bne.n	80045b8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2202      	movs	r2, #2
 80045f2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045f8:	4619      	mov	r1, r3
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f876 	bl	80046ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004600:	e063      	b.n	80046ca <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00e      	beq.n	800462c <HAL_UART_IRQHandler+0x5d8>
 800460e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004622:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 fbdd 	bl	8005de4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800462a:	e051      	b.n	80046d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800462c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004634:	2b00      	cmp	r3, #0
 8004636:	d014      	beq.n	8004662 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800463c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004654:	2b00      	cmp	r3, #0
 8004656:	d03a      	beq.n	80046ce <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
    }
    return;
 8004660:	e035      	b.n	80046ce <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_UART_IRQHandler+0x62e>
 800466e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fe66 	bl	800534c <UART_EndTransmit_IT>
    return;
 8004680:	e026      	b.n	80046d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_UART_IRQHandler+0x64e>
 800468e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004692:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 fbb6 	bl	8005e0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046a0:	e016      	b.n	80046d0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_UART_IRQHandler+0x67c>
 80046ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da0c      	bge.n	80046d0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f001 fb9e 	bl	8005df8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046bc:	e008      	b.n	80046d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80046be:	bf00      	nop
 80046c0:	e006      	b.n	80046d0 <HAL_UART_IRQHandler+0x67c>
    return;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <HAL_UART_IRQHandler+0x67c>
      return;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <HAL_UART_IRQHandler+0x67c>
    return;
 80046ce:	bf00      	nop
  }
}
 80046d0:	37e8      	adds	r7, #232	@ 0xe8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop

080046d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b08c      	sub	sp, #48	@ 0x30
 800470a:	af00      	add	r7, sp, #0
 800470c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	431a      	orrs	r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	431a      	orrs	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	4313      	orrs	r3, r2
 800472a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4bab      	ldr	r3, [pc, #684]	@ (80049e0 <UART_SetConfig+0x2dc>)
 8004734:	4013      	ands	r3, r2
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800473c:	430b      	orrs	r3, r1
 800473e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4aa0      	ldr	r2, [pc, #640]	@ (80049e4 <UART_SetConfig+0x2e0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800476c:	4313      	orrs	r3, r2
 800476e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800477a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004784:	430b      	orrs	r3, r1
 8004786:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	f023 010f 	bic.w	r1, r3, #15
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a91      	ldr	r2, [pc, #580]	@ (80049e8 <UART_SetConfig+0x2e4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d125      	bne.n	80047f4 <UART_SetConfig+0xf0>
 80047a8:	4b90      	ldr	r3, [pc, #576]	@ (80049ec <UART_SetConfig+0x2e8>)
 80047aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d81a      	bhi.n	80047ec <UART_SetConfig+0xe8>
 80047b6:	a201      	add	r2, pc, #4	@ (adr r2, 80047bc <UART_SetConfig+0xb8>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047cd 	.word	0x080047cd
 80047c0:	080047dd 	.word	0x080047dd
 80047c4:	080047d5 	.word	0x080047d5
 80047c8:	080047e5 	.word	0x080047e5
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d2:	e0d6      	b.n	8004982 <UART_SetConfig+0x27e>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047da:	e0d2      	b.n	8004982 <UART_SetConfig+0x27e>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e2:	e0ce      	b.n	8004982 <UART_SetConfig+0x27e>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ea:	e0ca      	b.n	8004982 <UART_SetConfig+0x27e>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047f2:	e0c6      	b.n	8004982 <UART_SetConfig+0x27e>
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a7d      	ldr	r2, [pc, #500]	@ (80049f0 <UART_SetConfig+0x2ec>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d138      	bne.n	8004870 <UART_SetConfig+0x16c>
 80047fe:	4b7b      	ldr	r3, [pc, #492]	@ (80049ec <UART_SetConfig+0x2e8>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d82d      	bhi.n	8004868 <UART_SetConfig+0x164>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <UART_SetConfig+0x110>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004849 	.word	0x08004849
 8004818:	08004869 	.word	0x08004869
 800481c:	08004869 	.word	0x08004869
 8004820:	08004869 	.word	0x08004869
 8004824:	08004859 	.word	0x08004859
 8004828:	08004869 	.word	0x08004869
 800482c:	08004869 	.word	0x08004869
 8004830:	08004869 	.word	0x08004869
 8004834:	08004851 	.word	0x08004851
 8004838:	08004869 	.word	0x08004869
 800483c:	08004869 	.word	0x08004869
 8004840:	08004869 	.word	0x08004869
 8004844:	08004861 	.word	0x08004861
 8004848:	2300      	movs	r3, #0
 800484a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800484e:	e098      	b.n	8004982 <UART_SetConfig+0x27e>
 8004850:	2302      	movs	r3, #2
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004856:	e094      	b.n	8004982 <UART_SetConfig+0x27e>
 8004858:	2304      	movs	r3, #4
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800485e:	e090      	b.n	8004982 <UART_SetConfig+0x27e>
 8004860:	2308      	movs	r3, #8
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004866:	e08c      	b.n	8004982 <UART_SetConfig+0x27e>
 8004868:	2310      	movs	r3, #16
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486e:	e088      	b.n	8004982 <UART_SetConfig+0x27e>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5f      	ldr	r2, [pc, #380]	@ (80049f4 <UART_SetConfig+0x2f0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d125      	bne.n	80048c6 <UART_SetConfig+0x1c2>
 800487a:	4b5c      	ldr	r3, [pc, #368]	@ (80049ec <UART_SetConfig+0x2e8>)
 800487c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004880:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004884:	2b30      	cmp	r3, #48	@ 0x30
 8004886:	d016      	beq.n	80048b6 <UART_SetConfig+0x1b2>
 8004888:	2b30      	cmp	r3, #48	@ 0x30
 800488a:	d818      	bhi.n	80048be <UART_SetConfig+0x1ba>
 800488c:	2b20      	cmp	r3, #32
 800488e:	d00a      	beq.n	80048a6 <UART_SetConfig+0x1a2>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d814      	bhi.n	80048be <UART_SetConfig+0x1ba>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d002      	beq.n	800489e <UART_SetConfig+0x19a>
 8004898:	2b10      	cmp	r3, #16
 800489a:	d008      	beq.n	80048ae <UART_SetConfig+0x1aa>
 800489c:	e00f      	b.n	80048be <UART_SetConfig+0x1ba>
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048a4:	e06d      	b.n	8004982 <UART_SetConfig+0x27e>
 80048a6:	2302      	movs	r3, #2
 80048a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ac:	e069      	b.n	8004982 <UART_SetConfig+0x27e>
 80048ae:	2304      	movs	r3, #4
 80048b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048b4:	e065      	b.n	8004982 <UART_SetConfig+0x27e>
 80048b6:	2308      	movs	r3, #8
 80048b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048bc:	e061      	b.n	8004982 <UART_SetConfig+0x27e>
 80048be:	2310      	movs	r3, #16
 80048c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048c4:	e05d      	b.n	8004982 <UART_SetConfig+0x27e>
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a4b      	ldr	r2, [pc, #300]	@ (80049f8 <UART_SetConfig+0x2f4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d125      	bne.n	800491c <UART_SetConfig+0x218>
 80048d0:	4b46      	ldr	r3, [pc, #280]	@ (80049ec <UART_SetConfig+0x2e8>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048da:	2bc0      	cmp	r3, #192	@ 0xc0
 80048dc:	d016      	beq.n	800490c <UART_SetConfig+0x208>
 80048de:	2bc0      	cmp	r3, #192	@ 0xc0
 80048e0:	d818      	bhi.n	8004914 <UART_SetConfig+0x210>
 80048e2:	2b80      	cmp	r3, #128	@ 0x80
 80048e4:	d00a      	beq.n	80048fc <UART_SetConfig+0x1f8>
 80048e6:	2b80      	cmp	r3, #128	@ 0x80
 80048e8:	d814      	bhi.n	8004914 <UART_SetConfig+0x210>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <UART_SetConfig+0x1f0>
 80048ee:	2b40      	cmp	r3, #64	@ 0x40
 80048f0:	d008      	beq.n	8004904 <UART_SetConfig+0x200>
 80048f2:	e00f      	b.n	8004914 <UART_SetConfig+0x210>
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fa:	e042      	b.n	8004982 <UART_SetConfig+0x27e>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004902:	e03e      	b.n	8004982 <UART_SetConfig+0x27e>
 8004904:	2304      	movs	r3, #4
 8004906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800490a:	e03a      	b.n	8004982 <UART_SetConfig+0x27e>
 800490c:	2308      	movs	r3, #8
 800490e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004912:	e036      	b.n	8004982 <UART_SetConfig+0x27e>
 8004914:	2310      	movs	r3, #16
 8004916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800491a:	e032      	b.n	8004982 <UART_SetConfig+0x27e>
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a30      	ldr	r2, [pc, #192]	@ (80049e4 <UART_SetConfig+0x2e0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d12a      	bne.n	800497c <UART_SetConfig+0x278>
 8004926:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <UART_SetConfig+0x2e8>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800492c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004930:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004934:	d01a      	beq.n	800496c <UART_SetConfig+0x268>
 8004936:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800493a:	d81b      	bhi.n	8004974 <UART_SetConfig+0x270>
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004940:	d00c      	beq.n	800495c <UART_SetConfig+0x258>
 8004942:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004946:	d815      	bhi.n	8004974 <UART_SetConfig+0x270>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <UART_SetConfig+0x250>
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004950:	d008      	beq.n	8004964 <UART_SetConfig+0x260>
 8004952:	e00f      	b.n	8004974 <UART_SetConfig+0x270>
 8004954:	2300      	movs	r3, #0
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495a:	e012      	b.n	8004982 <UART_SetConfig+0x27e>
 800495c:	2302      	movs	r3, #2
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004962:	e00e      	b.n	8004982 <UART_SetConfig+0x27e>
 8004964:	2304      	movs	r3, #4
 8004966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496a:	e00a      	b.n	8004982 <UART_SetConfig+0x27e>
 800496c:	2308      	movs	r3, #8
 800496e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004972:	e006      	b.n	8004982 <UART_SetConfig+0x27e>
 8004974:	2310      	movs	r3, #16
 8004976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800497a:	e002      	b.n	8004982 <UART_SetConfig+0x27e>
 800497c:	2310      	movs	r3, #16
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a17      	ldr	r2, [pc, #92]	@ (80049e4 <UART_SetConfig+0x2e0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	f040 80a8 	bne.w	8004ade <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800498e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004992:	2b08      	cmp	r3, #8
 8004994:	d834      	bhi.n	8004a00 <UART_SetConfig+0x2fc>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <UART_SetConfig+0x298>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	08004a01 	.word	0x08004a01
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	08004a01 	.word	0x08004a01
 80049ac:	080049cf 	.word	0x080049cf
 80049b0:	08004a01 	.word	0x08004a01
 80049b4:	08004a01 	.word	0x08004a01
 80049b8:	08004a01 	.word	0x08004a01
 80049bc:	080049d7 	.word	0x080049d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fd febc 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 80049c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049c6:	e021      	b.n	8004a0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c8:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <UART_SetConfig+0x2f8>)
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049cc:	e01e      	b.n	8004a0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ce:	f7fd fe47 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 80049d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049d4:	e01a      	b.n	8004a0c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049dc:	e016      	b.n	8004a0c <UART_SetConfig+0x308>
 80049de:	bf00      	nop
 80049e0:	cfff69f3 	.word	0xcfff69f3
 80049e4:	40008000 	.word	0x40008000
 80049e8:	40013800 	.word	0x40013800
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40004400 	.word	0x40004400
 80049f4:	40004800 	.word	0x40004800
 80049f8:	40004c00 	.word	0x40004c00
 80049fc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 812a 	beq.w	8004c68 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	4a9e      	ldr	r2, [pc, #632]	@ (8004c94 <UART_SetConfig+0x590>)
 8004a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	4413      	add	r3, r2
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d305      	bcc.n	8004a44 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d903      	bls.n	8004a4c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a4a:	e10d      	b.n	8004c68 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	2200      	movs	r2, #0
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	60fa      	str	r2, [r7, #12]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	4a8e      	ldr	r2, [pc, #568]	@ (8004c94 <UART_SetConfig+0x590>)
 8004a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	2200      	movs	r2, #0
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a6e:	f7fb fc27 	bl	80002c0 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4610      	mov	r0, r2
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	020b      	lsls	r3, r1, #8
 8004a84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a88:	0202      	lsls	r2, r0, #8
 8004a8a:	6979      	ldr	r1, [r7, #20]
 8004a8c:	6849      	ldr	r1, [r1, #4]
 8004a8e:	0849      	lsrs	r1, r1, #1
 8004a90:	2000      	movs	r0, #0
 8004a92:	460c      	mov	r4, r1
 8004a94:	4605      	mov	r5, r0
 8004a96:	eb12 0804 	adds.w	r8, r2, r4
 8004a9a:	eb43 0905 	adc.w	r9, r3, r5
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	469a      	mov	sl, r3
 8004aa6:	4693      	mov	fp, r2
 8004aa8:	4652      	mov	r2, sl
 8004aaa:	465b      	mov	r3, fp
 8004aac:	4640      	mov	r0, r8
 8004aae:	4649      	mov	r1, r9
 8004ab0:	f7fb fc06 	bl	80002c0 <__aeabi_uldivmod>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4613      	mov	r3, r2
 8004aba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac2:	d308      	bcc.n	8004ad6 <UART_SetConfig+0x3d2>
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aca:	d204      	bcs.n	8004ad6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6a3a      	ldr	r2, [r7, #32]
 8004ad2:	60da      	str	r2, [r3, #12]
 8004ad4:	e0c8      	b.n	8004c68 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004adc:	e0c4      	b.n	8004c68 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ae6:	d167      	bne.n	8004bb8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8004ae8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d828      	bhi.n	8004b42 <UART_SetConfig+0x43e>
 8004af0:	a201      	add	r2, pc, #4	@ (adr r2, 8004af8 <UART_SetConfig+0x3f4>)
 8004af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af6:	bf00      	nop
 8004af8:	08004b1d 	.word	0x08004b1d
 8004afc:	08004b25 	.word	0x08004b25
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	08004b43 	.word	0x08004b43
 8004b08:	08004b33 	.word	0x08004b33
 8004b0c:	08004b43 	.word	0x08004b43
 8004b10:	08004b43 	.word	0x08004b43
 8004b14:	08004b43 	.word	0x08004b43
 8004b18:	08004b3b 	.word	0x08004b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f7fd fe0e 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8004b20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b22:	e014      	b.n	8004b4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b24:	f7fd fe20 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8004b28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b2a:	e010      	b.n	8004b4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8004c98 <UART_SetConfig+0x594>)
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b30:	e00d      	b.n	8004b4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b32:	f7fd fd95 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8004b36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b38:	e009      	b.n	8004b4e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b40:	e005      	b.n	8004b4e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8089 	beq.w	8004c68 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5a:	4a4e      	ldr	r2, [pc, #312]	@ (8004c94 <UART_SetConfig+0x590>)
 8004b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b60:	461a      	mov	r2, r3
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b68:	005a      	lsls	r2, r3, #1
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	085b      	lsrs	r3, r3, #1
 8004b70:	441a      	add	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	2b0f      	cmp	r3, #15
 8004b80:	d916      	bls.n	8004bb0 <UART_SetConfig+0x4ac>
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b88:	d212      	bcs.n	8004bb0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f023 030f 	bic.w	r3, r3, #15
 8004b92:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	8bfb      	ldrh	r3, [r7, #30]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	8bfa      	ldrh	r2, [r7, #30]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	e05b      	b.n	8004c68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bb6:	e057      	b.n	8004c68 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d828      	bhi.n	8004c12 <UART_SetConfig+0x50e>
 8004bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <UART_SetConfig+0x4c4>)
 8004bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc6:	bf00      	nop
 8004bc8:	08004bed 	.word	0x08004bed
 8004bcc:	08004bf5 	.word	0x08004bf5
 8004bd0:	08004bfd 	.word	0x08004bfd
 8004bd4:	08004c13 	.word	0x08004c13
 8004bd8:	08004c03 	.word	0x08004c03
 8004bdc:	08004c13 	.word	0x08004c13
 8004be0:	08004c13 	.word	0x08004c13
 8004be4:	08004c13 	.word	0x08004c13
 8004be8:	08004c0b 	.word	0x08004c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bec:	f7fd fda6 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8004bf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bf2:	e014      	b.n	8004c1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf4:	f7fd fdb8 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8004bf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004bfa:	e010      	b.n	8004c1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bfc:	4b26      	ldr	r3, [pc, #152]	@ (8004c98 <UART_SetConfig+0x594>)
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c00:	e00d      	b.n	8004c1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c02:	f7fd fd2d 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8004c06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c08:	e009      	b.n	8004c1e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c10:	e005      	b.n	8004c1e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d021      	beq.n	8004c68 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <UART_SetConfig+0x590>)
 8004c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	441a      	add	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	d909      	bls.n	8004c62 <UART_SetConfig+0x55e>
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c54:	d205      	bcs.n	8004c62 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e002      	b.n	8004c68 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3730      	adds	r7, #48	@ 0x30
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c92:	bf00      	nop
 8004c94:	08006f94 	.word	0x08006f94
 8004c98:	00f42400 	.word	0x00f42400

08004c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01a      	beq.n	8004db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d9a:	d10a      	bne.n	8004db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b098      	sub	sp, #96	@ 0x60
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df0:	f7fc f9e2 	bl	80011b8 <HAL_GetTick>
 8004df4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d12f      	bne.n	8004e64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f88e 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d022      	beq.n	8004e64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e26:	e853 3f00 	ldrex	r3, [r3]
 8004e2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e3e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e44:	e841 2300 	strex	r3, r2, [r1]
 8004e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1e6      	bne.n	8004e1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e063      	b.n	8004f2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d149      	bne.n	8004f06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f857 	bl	8004f34 <UART_WaitOnFlagUntilTimeout>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d03c      	beq.n	8004f06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f023 0301 	bic.w	r3, r3, #1
 8004ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ede:	61fa      	str	r2, [r7, #28]
 8004ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	617b      	str	r3, [r7, #20]
   return(result);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e012      	b.n	8004f2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3758      	adds	r7, #88	@ 0x58
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	4613      	mov	r3, r2
 8004f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f44:	e04f      	b.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f4c:	d04b      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fc f933 	bl	80011b8 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e04e      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d037      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b80      	cmp	r3, #128	@ 0x80
 8004f7a:	d034      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b40      	cmp	r3, #64	@ 0x40
 8004f80:	d031      	beq.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d110      	bne.n	8004fb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2208      	movs	r2, #8
 8004f96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f95b 	bl	8005254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e029      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69db      	ldr	r3, [r3, #28]
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc0:	d111      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f941 	bl	8005254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e00f      	b.n	8005006 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	429a      	cmp	r2, r3
 8005002:	d0a0      	beq.n	8004f46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005010:	b480      	push	{r7}
 8005012:	b0a3      	sub	sp, #140	@ 0x8c
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	4613      	mov	r3, r2
 800501c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	88fa      	ldrh	r2, [r7, #6]
 8005028:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005042:	d10e      	bne.n	8005062 <UART_Start_Receive_IT+0x52>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d105      	bne.n	8005058 <UART_Start_Receive_IT+0x48>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005052:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005056:	e02d      	b.n	80050b4 <UART_Start_Receive_IT+0xa4>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	22ff      	movs	r2, #255	@ 0xff
 800505c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005060:	e028      	b.n	80050b4 <UART_Start_Receive_IT+0xa4>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10d      	bne.n	8005086 <UART_Start_Receive_IT+0x76>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <UART_Start_Receive_IT+0x6c>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	22ff      	movs	r2, #255	@ 0xff
 8005076:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800507a:	e01b      	b.n	80050b4 <UART_Start_Receive_IT+0xa4>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	227f      	movs	r2, #127	@ 0x7f
 8005080:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005084:	e016      	b.n	80050b4 <UART_Start_Receive_IT+0xa4>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800508e:	d10d      	bne.n	80050ac <UART_Start_Receive_IT+0x9c>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d104      	bne.n	80050a2 <UART_Start_Receive_IT+0x92>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	227f      	movs	r2, #127	@ 0x7f
 800509c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050a0:	e008      	b.n	80050b4 <UART_Start_Receive_IT+0xa4>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	223f      	movs	r2, #63	@ 0x3f
 80050a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80050aa:	e003      	b.n	80050b4 <UART_Start_Receive_IT+0xa4>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2222      	movs	r2, #34	@ 0x22
 80050c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3308      	adds	r3, #8
 80050ca:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80050d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3308      	adds	r3, #8
 80050e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80050e8:	673a      	str	r2, [r7, #112]	@ 0x70
 80050ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80050ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80050f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e3      	bne.n	80050c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005104:	d14f      	bne.n	80051a6 <UART_Start_Receive_IT+0x196>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	429a      	cmp	r2, r3
 8005110:	d349      	bcc.n	80051a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511a:	d107      	bne.n	800512c <UART_Start_Receive_IT+0x11c>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d103      	bne.n	800512c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4a47      	ldr	r2, [pc, #284]	@ (8005244 <UART_Start_Receive_IT+0x234>)
 8005128:	675a      	str	r2, [r3, #116]	@ 0x74
 800512a:	e002      	b.n	8005132 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	4a46      	ldr	r2, [pc, #280]	@ (8005248 <UART_Start_Receive_IT+0x238>)
 8005130:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01a      	beq.n	8005170 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005142:	e853 3f00 	ldrex	r3, [r3]
 8005146:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800514a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800514e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800515c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800515e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005162:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800516a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e4      	bne.n	800513a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005190:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005192:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800519e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e5      	bne.n	8005170 <UART_Start_Receive_IT+0x160>
 80051a4:	e046      	b.n	8005234 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ae:	d107      	bne.n	80051c0 <UART_Start_Receive_IT+0x1b0>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d103      	bne.n	80051c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a24      	ldr	r2, [pc, #144]	@ (800524c <UART_Start_Receive_IT+0x23c>)
 80051bc:	675a      	str	r2, [r3, #116]	@ 0x74
 80051be:	e002      	b.n	80051c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4a23      	ldr	r2, [pc, #140]	@ (8005250 <UART_Start_Receive_IT+0x240>)
 80051c4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d019      	beq.n	8005202 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80051e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80051ee:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e6      	bne.n	80051ce <UART_Start_Receive_IT+0x1be>
 8005200:	e018      	b.n	8005234 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	613b      	str	r3, [r7, #16]
   return(result);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f043 0320 	orr.w	r3, r3, #32
 8005216:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	6a3a      	ldr	r2, [r7, #32]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	61bb      	str	r3, [r7, #24]
   return(result);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e6      	bne.n	8005202 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	378c      	adds	r7, #140	@ 0x8c
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	08005a79 	.word	0x08005a79
 8005248:	08005715 	.word	0x08005715
 800524c:	0800555d 	.word	0x0800555d
 8005250:	080053a5 	.word	0x080053a5

08005254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b095      	sub	sp, #84	@ 0x54
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005264:	e853 3f00 	ldrex	r3, [r3]
 8005268:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800526a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800527a:	643b      	str	r3, [r7, #64]	@ 0x40
 800527c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005282:	e841 2300 	strex	r3, r2, [r1]
 8005286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1e6      	bne.n	800525c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	e853 3f00 	ldrex	r3, [r3]
 800529c:	61fb      	str	r3, [r7, #28]
   return(result);
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ba:	e841 2300 	strex	r3, r2, [r1]
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e3      	bne.n	800528e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d118      	bne.n	8005300 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	60bb      	str	r3, [r7, #8]
   return(result);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f023 0310 	bic.w	r3, r3, #16
 80052e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	461a      	mov	r2, r3
 80052ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6979      	ldr	r1, [r7, #20]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	613b      	str	r3, [r7, #16]
   return(result);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e6      	bne.n	80052ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005314:	bf00      	nop
 8005316:	3754      	adds	r7, #84	@ 0x54
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff f9ca 	bl	80046d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b088      	sub	sp, #32
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	60bb      	str	r3, [r7, #8]
   return(result);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005368:	61fb      	str	r3, [r7, #28]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	461a      	mov	r2, r3
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	613b      	str	r3, [r7, #16]
   return(result);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e6      	bne.n	8005354 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fb fb2f 	bl	80009f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800539a:	bf00      	nop
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b09c      	sub	sp, #112	@ 0x70
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80053b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053bc:	2b22      	cmp	r3, #34	@ 0x22
 80053be:	f040 80be 	bne.w	800553e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80053cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80053d0:	b2d9      	uxtb	r1, r3
 80053d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80053d6:	b2da      	uxtb	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053dc:	400a      	ands	r2, r1
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	f040 80a1 	bne.w	800554e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800541a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800541c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800542a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800542c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005430:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e6      	bne.n	800540c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3308      	adds	r3, #8
 8005444:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800544e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005450:	f023 0301 	bic.w	r3, r3, #1
 8005454:	667b      	str	r3, [r7, #100]	@ 0x64
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3308      	adds	r3, #8
 800545c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800545e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005464:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800546c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e5      	bne.n	800543e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a33      	ldr	r2, [pc, #204]	@ (8005558 <UART_RxISR_8BIT+0x1b4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d01f      	beq.n	80054d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d018      	beq.n	80054d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	623b      	str	r3, [r7, #32]
   return(result);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80054be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80054ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e6      	bne.n	800549e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d12e      	bne.n	8005536 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0310 	bic.w	r3, r3, #16
 80054f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	69b9      	ldr	r1, [r7, #24]
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	617b      	str	r3, [r7, #20]
   return(result);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b10      	cmp	r3, #16
 800551c:	d103      	bne.n	8005526 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2210      	movs	r2, #16
 8005524:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800552c:	4619      	mov	r1, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff f8dc 	bl	80046ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005534:	e00b      	b.n	800554e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fb fa3a 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 800553c:	e007      	b.n	800554e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	619a      	str	r2, [r3, #24]
}
 800554e:	bf00      	nop
 8005550:	3770      	adds	r7, #112	@ 0x70
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40008000 	.word	0x40008000

0800555c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b09c      	sub	sp, #112	@ 0x70
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800556a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005574:	2b22      	cmp	r3, #34	@ 0x22
 8005576:	f040 80be 	bne.w	80056f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005580:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800558a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800558e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005592:	4013      	ands	r3, r2
 8005594:	b29a      	uxth	r2, r3
 8005596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005598:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559e:	1c9a      	adds	r2, r3, #2
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 80a1 	bne.w	8005706 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80055e4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80055f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e6      	bne.n	80055c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3308      	adds	r3, #8
 80055fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	663b      	str	r3, [r7, #96]	@ 0x60
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3308      	adds	r3, #8
 8005614:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005616:	643a      	str	r2, [r7, #64]	@ 0x40
 8005618:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800561c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e5      	bne.n	80055f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a33      	ldr	r2, [pc, #204]	@ (8005710 <UART_RxISR_16BIT+0x1b4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d01f      	beq.n	8005688 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d018      	beq.n	8005688 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	61fb      	str	r3, [r7, #28]
   return(result);
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800566a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005676:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800567a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e6      	bne.n	8005656 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d12e      	bne.n	80056ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	e853 3f00 	ldrex	r3, [r3]
 80056a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f023 0310 	bic.w	r3, r3, #16
 80056aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b8:	6979      	ldr	r1, [r7, #20]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	613b      	str	r3, [r7, #16]
   return(result);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1e6      	bne.n	8005696 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d103      	bne.n	80056de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2210      	movs	r2, #16
 80056dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7ff f800 	bl	80046ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056ec:	e00b      	b.n	8005706 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7fb f95e 	bl	80009b0 <HAL_UART_RxCpltCallback>
}
 80056f4:	e007      	b.n	8005706 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699a      	ldr	r2, [r3, #24]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0208 	orr.w	r2, r2, #8
 8005704:	619a      	str	r2, [r3, #24]
}
 8005706:	bf00      	nop
 8005708:	3770      	adds	r7, #112	@ 0x70
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40008000 	.word	0x40008000

08005714 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b0ac      	sub	sp, #176	@ 0xb0
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005722:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800574a:	2b22      	cmp	r3, #34	@ 0x22
 800574c:	f040 8183 	bne.w	8005a56 <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005756:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800575a:	e126      	b.n	80059aa <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005766:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800576a:	b2d9      	uxtb	r1, r3
 800576c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8005770:	b2da      	uxtb	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005776:	400a      	ands	r2, r1
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80057a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d053      	beq.n	8005856 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d011      	beq.n	80057de <UART_RxISR_8BIT_FIFOEN+0xca>
 80057ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80057be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2201      	movs	r2, #1
 80057cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d011      	beq.n	800580e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80057ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2202      	movs	r2, #2
 80057fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005804:	f043 0204 	orr.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800580e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d011      	beq.n	800583e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800581a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2204      	movs	r2, #4
 800582c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005834:	f043 0202 	orr.w	r2, r3, #2
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005844:	2b00      	cmp	r3, #0
 8005846:	d006      	beq.n	8005856 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fe ff45 	bl	80046d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 80a3 	bne.w	80059aa <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8005872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005878:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005886:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005888:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800588c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8005894:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e4      	bne.n	8005864 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058a4:	e853 3f00 	ldrex	r3, [r3]
 80058a8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80058aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058c2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80058c4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80058c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80058ca:	e841 2300 	strex	r3, r2, [r1]
 80058ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80058d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1e1      	bne.n	800589a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2220      	movs	r2, #32
 80058da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a60      	ldr	r2, [pc, #384]	@ (8005a70 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d021      	beq.n	8005938 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d01a      	beq.n	8005938 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005916:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005924:	657b      	str	r3, [r7, #84]	@ 0x54
 8005926:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800592a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e4      	bne.n	8005902 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d130      	bne.n	80059a2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	f023 0310 	bic.w	r3, r3, #16
 800595a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	461a      	mov	r2, r3
 8005964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005968:	643b      	str	r3, [r7, #64]	@ 0x40
 800596a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800596e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e4      	bne.n	8005946 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b10      	cmp	r3, #16
 8005988:	d103      	bne.n	8005992 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2210      	movs	r2, #16
 8005990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fe fea6 	bl	80046ec <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80059a0:	e00e      	b.n	80059c0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fb f804 	bl	80009b0 <HAL_UART_RxCpltCallback>
        break;
 80059a8:	e00a      	b.n	80059c0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059aa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d006      	beq.n	80059c0 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80059b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f47f aece 	bne.w	800575c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059c6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059ca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d049      	beq.n	8005a66 <UART_RxISR_8BIT_FIFOEN+0x352>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80059d8:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80059dc:	429a      	cmp	r2, r3
 80059de:	d242      	bcs.n	8005a66 <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3308      	adds	r3, #8
 80059e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	e853 3f00 	ldrex	r3, [r3]
 80059ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3308      	adds	r3, #8
 8005a00:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e3      	bne.n	80059e0 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	@ (8005a74 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8005a1c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f043 0320 	orr.w	r3, r3, #32
 8005a32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6979      	ldr	r1, [r7, #20]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e4      	bne.n	8005a1e <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a54:	e007      	b.n	8005a66 <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0208 	orr.w	r2, r2, #8
 8005a64:	619a      	str	r2, [r3, #24]
}
 8005a66:	bf00      	nop
 8005a68:	37b0      	adds	r7, #176	@ 0xb0
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40008000 	.word	0x40008000
 8005a74:	080053a5 	.word	0x080053a5

08005a78 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b0ae      	sub	sp, #184	@ 0xb8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005a86:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005aae:	2b22      	cmp	r3, #34	@ 0x22
 8005ab0:	f040 8187 	bne.w	8005dc2 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005aba:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005abe:	e12a      	b.n	8005d16 <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ace:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005ad2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8005ad6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8005ada:	4013      	ands	r3, r2
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ae2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ae8:	1c9a      	adds	r2, r3, #2
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d053      	beq.n	8005bbe <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d011      	beq.n	8005b46 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2201      	movs	r2, #1
 8005b34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3c:	f043 0201 	orr.w	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2202      	movs	r2, #2
 8005b64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6c:	f043 0204 	orr.w	r2, r3, #4
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2204      	movs	r2, #4
 8005b94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b9c:	f043 0202 	orr.w	r2, r3, #2
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d006      	beq.n	8005bbe <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7fe fd91 	bl	80046d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 80a5 	bne.w	8005d16 <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e2      	bne.n	8005bcc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c1c:	f023 0301 	bic.w	r3, r3, #1
 8005c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005c2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c36:	e841 2300 	strex	r3, r2, [r1]
 8005c3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1e1      	bne.n	8005c06 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a60      	ldr	r2, [pc, #384]	@ (8005ddc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d021      	beq.n	8005ca4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01a      	beq.n	8005ca4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c98:	e841 2300 	strex	r3, r2, [r1]
 8005c9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e4      	bne.n	8005c6e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d130      	bne.n	8005d0e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc2:	f023 0310 	bic.w	r3, r3, #16
 8005cc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e4      	bne.n	8005cb2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d103      	bne.n	8005cfe <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d04:	4619      	mov	r1, r3
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fe fcf0 	bl	80046ec <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8005d0c:	e00e      	b.n	8005d2c <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fa fe4e 	bl	80009b0 <HAL_UART_RxCpltCallback>
        break;
 8005d14:	e00a      	b.n	8005d2c <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d16:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d006      	beq.n	8005d2c <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8005d1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f aeca 	bne.w	8005ac0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005d32:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d049      	beq.n	8005dd2 <UART_RxISR_16BIT_FIFOEN+0x35a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005d44:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d242      	bcs.n	8005dd2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	623b      	str	r3, [r7, #32]
   return(result);
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005d70:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e3      	bne.n	8005d4c <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a16      	ldr	r2, [pc, #88]	@ (8005de0 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8005d88:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	e853 3f00 	ldrex	r3, [r3]
 8005d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f043 0320 	orr.w	r3, r3, #32
 8005d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69b9      	ldr	r1, [r7, #24]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e4      	bne.n	8005d8a <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dc0:	e007      	b.n	8005dd2 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699a      	ldr	r2, [r3, #24]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0208 	orr.w	r2, r2, #8
 8005dd0:	619a      	str	r2, [r3, #24]
}
 8005dd2:	bf00      	nop
 8005dd4:	37b8      	adds	r7, #184	@ 0xb8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40008000 	.word	0x40008000
 8005de0:	0800555d 	.word	0x0800555d

08005de4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e027      	b.n	8005e86 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2224      	movs	r2, #36	@ 0x24
 8005e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b084      	sub	sp, #16
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e02d      	b.n	8005f06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2224      	movs	r2, #36	@ 0x24
 8005eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f850 	bl	8005f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e02d      	b.n	8005f82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2224      	movs	r2, #36	@ 0x24
 8005f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0201 	bic.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f812 	bl	8005f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d108      	bne.n	8005fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fac:	e031      	b.n	8006012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fae:	2308      	movs	r3, #8
 8005fb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fb2:	2308      	movs	r3, #8
 8005fb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	0e5b      	lsrs	r3, r3, #25
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	0f5b      	lsrs	r3, r3, #29
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	7b3a      	ldrb	r2, [r7, #12]
 8005fda:	4911      	ldr	r1, [pc, #68]	@ (8006020 <UARTEx_SetNbDataToProcess+0x94>)
 8005fdc:	5c8a      	ldrb	r2, [r1, r2]
 8005fde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fe2:	7b3a      	ldrb	r2, [r7, #12]
 8005fe4:	490f      	ldr	r1, [pc, #60]	@ (8006024 <UARTEx_SetNbDataToProcess+0x98>)
 8005fe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	7b7a      	ldrb	r2, [r7, #13]
 8005ff8:	4909      	ldr	r1, [pc, #36]	@ (8006020 <UARTEx_SetNbDataToProcess+0x94>)
 8005ffa:	5c8a      	ldrb	r2, [r1, r2]
 8005ffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006000:	7b7a      	ldrb	r2, [r7, #13]
 8006002:	4908      	ldr	r1, [pc, #32]	@ (8006024 <UARTEx_SetNbDataToProcess+0x98>)
 8006004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006006:	fb93 f3f2 	sdiv	r3, r3, r2
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	08006fac 	.word	0x08006fac
 8006024:	08006fb4 	.word	0x08006fb4

08006028 <std>:
 8006028:	2300      	movs	r3, #0
 800602a:	b510      	push	{r4, lr}
 800602c:	4604      	mov	r4, r0
 800602e:	e9c0 3300 	strd	r3, r3, [r0]
 8006032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006036:	6083      	str	r3, [r0, #8]
 8006038:	8181      	strh	r1, [r0, #12]
 800603a:	6643      	str	r3, [r0, #100]	@ 0x64
 800603c:	81c2      	strh	r2, [r0, #14]
 800603e:	6183      	str	r3, [r0, #24]
 8006040:	4619      	mov	r1, r3
 8006042:	2208      	movs	r2, #8
 8006044:	305c      	adds	r0, #92	@ 0x5c
 8006046:	f000 f921 	bl	800628c <memset>
 800604a:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <std+0x58>)
 800604c:	6263      	str	r3, [r4, #36]	@ 0x24
 800604e:	4b0d      	ldr	r3, [pc, #52]	@ (8006084 <std+0x5c>)
 8006050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006052:	4b0d      	ldr	r3, [pc, #52]	@ (8006088 <std+0x60>)
 8006054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006056:	4b0d      	ldr	r3, [pc, #52]	@ (800608c <std+0x64>)
 8006058:	6323      	str	r3, [r4, #48]	@ 0x30
 800605a:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <std+0x68>)
 800605c:	6224      	str	r4, [r4, #32]
 800605e:	429c      	cmp	r4, r3
 8006060:	d006      	beq.n	8006070 <std+0x48>
 8006062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006066:	4294      	cmp	r4, r2
 8006068:	d002      	beq.n	8006070 <std+0x48>
 800606a:	33d0      	adds	r3, #208	@ 0xd0
 800606c:	429c      	cmp	r4, r3
 800606e:	d105      	bne.n	800607c <std+0x54>
 8006070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006078:	f000 b93a 	b.w	80062f0 <__retarget_lock_init_recursive>
 800607c:	bd10      	pop	{r4, pc}
 800607e:	bf00      	nop
 8006080:	08006b49 	.word	0x08006b49
 8006084:	08006b6b 	.word	0x08006b6b
 8006088:	08006ba3 	.word	0x08006ba3
 800608c:	08006bc7 	.word	0x08006bc7
 8006090:	20000344 	.word	0x20000344

08006094 <stdio_exit_handler>:
 8006094:	4a02      	ldr	r2, [pc, #8]	@ (80060a0 <stdio_exit_handler+0xc>)
 8006096:	4903      	ldr	r1, [pc, #12]	@ (80060a4 <stdio_exit_handler+0x10>)
 8006098:	4803      	ldr	r0, [pc, #12]	@ (80060a8 <stdio_exit_handler+0x14>)
 800609a:	f000 b869 	b.w	8006170 <_fwalk_sglue>
 800609e:	bf00      	nop
 80060a0:	2000000c 	.word	0x2000000c
 80060a4:	08006ae1 	.word	0x08006ae1
 80060a8:	2000001c 	.word	0x2000001c

080060ac <cleanup_stdio>:
 80060ac:	6841      	ldr	r1, [r0, #4]
 80060ae:	4b0c      	ldr	r3, [pc, #48]	@ (80060e0 <cleanup_stdio+0x34>)
 80060b0:	4299      	cmp	r1, r3
 80060b2:	b510      	push	{r4, lr}
 80060b4:	4604      	mov	r4, r0
 80060b6:	d001      	beq.n	80060bc <cleanup_stdio+0x10>
 80060b8:	f000 fd12 	bl	8006ae0 <_fflush_r>
 80060bc:	68a1      	ldr	r1, [r4, #8]
 80060be:	4b09      	ldr	r3, [pc, #36]	@ (80060e4 <cleanup_stdio+0x38>)
 80060c0:	4299      	cmp	r1, r3
 80060c2:	d002      	beq.n	80060ca <cleanup_stdio+0x1e>
 80060c4:	4620      	mov	r0, r4
 80060c6:	f000 fd0b 	bl	8006ae0 <_fflush_r>
 80060ca:	68e1      	ldr	r1, [r4, #12]
 80060cc:	4b06      	ldr	r3, [pc, #24]	@ (80060e8 <cleanup_stdio+0x3c>)
 80060ce:	4299      	cmp	r1, r3
 80060d0:	d004      	beq.n	80060dc <cleanup_stdio+0x30>
 80060d2:	4620      	mov	r0, r4
 80060d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d8:	f000 bd02 	b.w	8006ae0 <_fflush_r>
 80060dc:	bd10      	pop	{r4, pc}
 80060de:	bf00      	nop
 80060e0:	20000344 	.word	0x20000344
 80060e4:	200003ac 	.word	0x200003ac
 80060e8:	20000414 	.word	0x20000414

080060ec <global_stdio_init.part.0>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	4b0b      	ldr	r3, [pc, #44]	@ (800611c <global_stdio_init.part.0+0x30>)
 80060f0:	4c0b      	ldr	r4, [pc, #44]	@ (8006120 <global_stdio_init.part.0+0x34>)
 80060f2:	4a0c      	ldr	r2, [pc, #48]	@ (8006124 <global_stdio_init.part.0+0x38>)
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	4620      	mov	r0, r4
 80060f8:	2200      	movs	r2, #0
 80060fa:	2104      	movs	r1, #4
 80060fc:	f7ff ff94 	bl	8006028 <std>
 8006100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006104:	2201      	movs	r2, #1
 8006106:	2109      	movs	r1, #9
 8006108:	f7ff ff8e 	bl	8006028 <std>
 800610c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006110:	2202      	movs	r2, #2
 8006112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006116:	2112      	movs	r1, #18
 8006118:	f7ff bf86 	b.w	8006028 <std>
 800611c:	2000047c 	.word	0x2000047c
 8006120:	20000344 	.word	0x20000344
 8006124:	08006095 	.word	0x08006095

08006128 <__sfp_lock_acquire>:
 8006128:	4801      	ldr	r0, [pc, #4]	@ (8006130 <__sfp_lock_acquire+0x8>)
 800612a:	f000 b8e2 	b.w	80062f2 <__retarget_lock_acquire_recursive>
 800612e:	bf00      	nop
 8006130:	20000481 	.word	0x20000481

08006134 <__sfp_lock_release>:
 8006134:	4801      	ldr	r0, [pc, #4]	@ (800613c <__sfp_lock_release+0x8>)
 8006136:	f000 b8dd 	b.w	80062f4 <__retarget_lock_release_recursive>
 800613a:	bf00      	nop
 800613c:	20000481 	.word	0x20000481

08006140 <__sinit>:
 8006140:	b510      	push	{r4, lr}
 8006142:	4604      	mov	r4, r0
 8006144:	f7ff fff0 	bl	8006128 <__sfp_lock_acquire>
 8006148:	6a23      	ldr	r3, [r4, #32]
 800614a:	b11b      	cbz	r3, 8006154 <__sinit+0x14>
 800614c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006150:	f7ff bff0 	b.w	8006134 <__sfp_lock_release>
 8006154:	4b04      	ldr	r3, [pc, #16]	@ (8006168 <__sinit+0x28>)
 8006156:	6223      	str	r3, [r4, #32]
 8006158:	4b04      	ldr	r3, [pc, #16]	@ (800616c <__sinit+0x2c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f5      	bne.n	800614c <__sinit+0xc>
 8006160:	f7ff ffc4 	bl	80060ec <global_stdio_init.part.0>
 8006164:	e7f2      	b.n	800614c <__sinit+0xc>
 8006166:	bf00      	nop
 8006168:	080060ad 	.word	0x080060ad
 800616c:	2000047c 	.word	0x2000047c

08006170 <_fwalk_sglue>:
 8006170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006174:	4607      	mov	r7, r0
 8006176:	4688      	mov	r8, r1
 8006178:	4614      	mov	r4, r2
 800617a:	2600      	movs	r6, #0
 800617c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006180:	f1b9 0901 	subs.w	r9, r9, #1
 8006184:	d505      	bpl.n	8006192 <_fwalk_sglue+0x22>
 8006186:	6824      	ldr	r4, [r4, #0]
 8006188:	2c00      	cmp	r4, #0
 800618a:	d1f7      	bne.n	800617c <_fwalk_sglue+0xc>
 800618c:	4630      	mov	r0, r6
 800618e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006192:	89ab      	ldrh	r3, [r5, #12]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d907      	bls.n	80061a8 <_fwalk_sglue+0x38>
 8006198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800619c:	3301      	adds	r3, #1
 800619e:	d003      	beq.n	80061a8 <_fwalk_sglue+0x38>
 80061a0:	4629      	mov	r1, r5
 80061a2:	4638      	mov	r0, r7
 80061a4:	47c0      	blx	r8
 80061a6:	4306      	orrs	r6, r0
 80061a8:	3568      	adds	r5, #104	@ 0x68
 80061aa:	e7e9      	b.n	8006180 <_fwalk_sglue+0x10>

080061ac <iprintf>:
 80061ac:	b40f      	push	{r0, r1, r2, r3}
 80061ae:	b507      	push	{r0, r1, r2, lr}
 80061b0:	4906      	ldr	r1, [pc, #24]	@ (80061cc <iprintf+0x20>)
 80061b2:	ab04      	add	r3, sp, #16
 80061b4:	6808      	ldr	r0, [r1, #0]
 80061b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ba:	6881      	ldr	r1, [r0, #8]
 80061bc:	9301      	str	r3, [sp, #4]
 80061be:	f000 f8c3 	bl	8006348 <_vfiprintf_r>
 80061c2:	b003      	add	sp, #12
 80061c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80061c8:	b004      	add	sp, #16
 80061ca:	4770      	bx	lr
 80061cc:	20000018 	.word	0x20000018

080061d0 <_puts_r>:
 80061d0:	6a03      	ldr	r3, [r0, #32]
 80061d2:	b570      	push	{r4, r5, r6, lr}
 80061d4:	6884      	ldr	r4, [r0, #8]
 80061d6:	4605      	mov	r5, r0
 80061d8:	460e      	mov	r6, r1
 80061da:	b90b      	cbnz	r3, 80061e0 <_puts_r+0x10>
 80061dc:	f7ff ffb0 	bl	8006140 <__sinit>
 80061e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061e2:	07db      	lsls	r3, r3, #31
 80061e4:	d405      	bmi.n	80061f2 <_puts_r+0x22>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	0598      	lsls	r0, r3, #22
 80061ea:	d402      	bmi.n	80061f2 <_puts_r+0x22>
 80061ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ee:	f000 f880 	bl	80062f2 <__retarget_lock_acquire_recursive>
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	0719      	lsls	r1, r3, #28
 80061f6:	d502      	bpl.n	80061fe <_puts_r+0x2e>
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d135      	bne.n	800626a <_puts_r+0x9a>
 80061fe:	4621      	mov	r1, r4
 8006200:	4628      	mov	r0, r5
 8006202:	f000 fd23 	bl	8006c4c <__swsetup_r>
 8006206:	b380      	cbz	r0, 800626a <_puts_r+0x9a>
 8006208:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800620c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800620e:	07da      	lsls	r2, r3, #31
 8006210:	d405      	bmi.n	800621e <_puts_r+0x4e>
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	059b      	lsls	r3, r3, #22
 8006216:	d402      	bmi.n	800621e <_puts_r+0x4e>
 8006218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800621a:	f000 f86b 	bl	80062f4 <__retarget_lock_release_recursive>
 800621e:	4628      	mov	r0, r5
 8006220:	bd70      	pop	{r4, r5, r6, pc}
 8006222:	2b00      	cmp	r3, #0
 8006224:	da04      	bge.n	8006230 <_puts_r+0x60>
 8006226:	69a2      	ldr	r2, [r4, #24]
 8006228:	429a      	cmp	r2, r3
 800622a:	dc17      	bgt.n	800625c <_puts_r+0x8c>
 800622c:	290a      	cmp	r1, #10
 800622e:	d015      	beq.n	800625c <_puts_r+0x8c>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	6022      	str	r2, [r4, #0]
 8006236:	7019      	strb	r1, [r3, #0]
 8006238:	68a3      	ldr	r3, [r4, #8]
 800623a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800623e:	3b01      	subs	r3, #1
 8006240:	60a3      	str	r3, [r4, #8]
 8006242:	2900      	cmp	r1, #0
 8006244:	d1ed      	bne.n	8006222 <_puts_r+0x52>
 8006246:	2b00      	cmp	r3, #0
 8006248:	da11      	bge.n	800626e <_puts_r+0x9e>
 800624a:	4622      	mov	r2, r4
 800624c:	210a      	movs	r1, #10
 800624e:	4628      	mov	r0, r5
 8006250:	f000 fcbd 	bl	8006bce <__swbuf_r>
 8006254:	3001      	adds	r0, #1
 8006256:	d0d7      	beq.n	8006208 <_puts_r+0x38>
 8006258:	250a      	movs	r5, #10
 800625a:	e7d7      	b.n	800620c <_puts_r+0x3c>
 800625c:	4622      	mov	r2, r4
 800625e:	4628      	mov	r0, r5
 8006260:	f000 fcb5 	bl	8006bce <__swbuf_r>
 8006264:	3001      	adds	r0, #1
 8006266:	d1e7      	bne.n	8006238 <_puts_r+0x68>
 8006268:	e7ce      	b.n	8006208 <_puts_r+0x38>
 800626a:	3e01      	subs	r6, #1
 800626c:	e7e4      	b.n	8006238 <_puts_r+0x68>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	220a      	movs	r2, #10
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	e7ee      	b.n	8006258 <_puts_r+0x88>
	...

0800627c <puts>:
 800627c:	4b02      	ldr	r3, [pc, #8]	@ (8006288 <puts+0xc>)
 800627e:	4601      	mov	r1, r0
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f7ff bfa5 	b.w	80061d0 <_puts_r>
 8006286:	bf00      	nop
 8006288:	20000018 	.word	0x20000018

0800628c <memset>:
 800628c:	4402      	add	r2, r0
 800628e:	4603      	mov	r3, r0
 8006290:	4293      	cmp	r3, r2
 8006292:	d100      	bne.n	8006296 <memset+0xa>
 8006294:	4770      	bx	lr
 8006296:	f803 1b01 	strb.w	r1, [r3], #1
 800629a:	e7f9      	b.n	8006290 <memset+0x4>

0800629c <__errno>:
 800629c:	4b01      	ldr	r3, [pc, #4]	@ (80062a4 <__errno+0x8>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000018 	.word	0x20000018

080062a8 <__libc_init_array>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4d0d      	ldr	r5, [pc, #52]	@ (80062e0 <__libc_init_array+0x38>)
 80062ac:	4c0d      	ldr	r4, [pc, #52]	@ (80062e4 <__libc_init_array+0x3c>)
 80062ae:	1b64      	subs	r4, r4, r5
 80062b0:	10a4      	asrs	r4, r4, #2
 80062b2:	2600      	movs	r6, #0
 80062b4:	42a6      	cmp	r6, r4
 80062b6:	d109      	bne.n	80062cc <__libc_init_array+0x24>
 80062b8:	4d0b      	ldr	r5, [pc, #44]	@ (80062e8 <__libc_init_array+0x40>)
 80062ba:	4c0c      	ldr	r4, [pc, #48]	@ (80062ec <__libc_init_array+0x44>)
 80062bc:	f000 fe40 	bl	8006f40 <_init>
 80062c0:	1b64      	subs	r4, r4, r5
 80062c2:	10a4      	asrs	r4, r4, #2
 80062c4:	2600      	movs	r6, #0
 80062c6:	42a6      	cmp	r6, r4
 80062c8:	d105      	bne.n	80062d6 <__libc_init_array+0x2e>
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d0:	4798      	blx	r3
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7ee      	b.n	80062b4 <__libc_init_array+0xc>
 80062d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062da:	4798      	blx	r3
 80062dc:	3601      	adds	r6, #1
 80062de:	e7f2      	b.n	80062c6 <__libc_init_array+0x1e>
 80062e0:	08006ff8 	.word	0x08006ff8
 80062e4:	08006ff8 	.word	0x08006ff8
 80062e8:	08006ff8 	.word	0x08006ff8
 80062ec:	08006ffc 	.word	0x08006ffc

080062f0 <__retarget_lock_init_recursive>:
 80062f0:	4770      	bx	lr

080062f2 <__retarget_lock_acquire_recursive>:
 80062f2:	4770      	bx	lr

080062f4 <__retarget_lock_release_recursive>:
 80062f4:	4770      	bx	lr

080062f6 <__sfputc_r>:
 80062f6:	6893      	ldr	r3, [r2, #8]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	b410      	push	{r4}
 80062fe:	6093      	str	r3, [r2, #8]
 8006300:	da08      	bge.n	8006314 <__sfputc_r+0x1e>
 8006302:	6994      	ldr	r4, [r2, #24]
 8006304:	42a3      	cmp	r3, r4
 8006306:	db01      	blt.n	800630c <__sfputc_r+0x16>
 8006308:	290a      	cmp	r1, #10
 800630a:	d103      	bne.n	8006314 <__sfputc_r+0x1e>
 800630c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006310:	f000 bc5d 	b.w	8006bce <__swbuf_r>
 8006314:	6813      	ldr	r3, [r2, #0]
 8006316:	1c58      	adds	r0, r3, #1
 8006318:	6010      	str	r0, [r2, #0]
 800631a:	7019      	strb	r1, [r3, #0]
 800631c:	4608      	mov	r0, r1
 800631e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006322:	4770      	bx	lr

08006324 <__sfputs_r>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	4606      	mov	r6, r0
 8006328:	460f      	mov	r7, r1
 800632a:	4614      	mov	r4, r2
 800632c:	18d5      	adds	r5, r2, r3
 800632e:	42ac      	cmp	r4, r5
 8006330:	d101      	bne.n	8006336 <__sfputs_r+0x12>
 8006332:	2000      	movs	r0, #0
 8006334:	e007      	b.n	8006346 <__sfputs_r+0x22>
 8006336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800633a:	463a      	mov	r2, r7
 800633c:	4630      	mov	r0, r6
 800633e:	f7ff ffda 	bl	80062f6 <__sfputc_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d1f3      	bne.n	800632e <__sfputs_r+0xa>
 8006346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006348 <_vfiprintf_r>:
 8006348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634c:	460d      	mov	r5, r1
 800634e:	b09d      	sub	sp, #116	@ 0x74
 8006350:	4614      	mov	r4, r2
 8006352:	4698      	mov	r8, r3
 8006354:	4606      	mov	r6, r0
 8006356:	b118      	cbz	r0, 8006360 <_vfiprintf_r+0x18>
 8006358:	6a03      	ldr	r3, [r0, #32]
 800635a:	b90b      	cbnz	r3, 8006360 <_vfiprintf_r+0x18>
 800635c:	f7ff fef0 	bl	8006140 <__sinit>
 8006360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006362:	07d9      	lsls	r1, r3, #31
 8006364:	d405      	bmi.n	8006372 <_vfiprintf_r+0x2a>
 8006366:	89ab      	ldrh	r3, [r5, #12]
 8006368:	059a      	lsls	r2, r3, #22
 800636a:	d402      	bmi.n	8006372 <_vfiprintf_r+0x2a>
 800636c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800636e:	f7ff ffc0 	bl	80062f2 <__retarget_lock_acquire_recursive>
 8006372:	89ab      	ldrh	r3, [r5, #12]
 8006374:	071b      	lsls	r3, r3, #28
 8006376:	d501      	bpl.n	800637c <_vfiprintf_r+0x34>
 8006378:	692b      	ldr	r3, [r5, #16]
 800637a:	b99b      	cbnz	r3, 80063a4 <_vfiprintf_r+0x5c>
 800637c:	4629      	mov	r1, r5
 800637e:	4630      	mov	r0, r6
 8006380:	f000 fc64 	bl	8006c4c <__swsetup_r>
 8006384:	b170      	cbz	r0, 80063a4 <_vfiprintf_r+0x5c>
 8006386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006388:	07dc      	lsls	r4, r3, #31
 800638a:	d504      	bpl.n	8006396 <_vfiprintf_r+0x4e>
 800638c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006390:	b01d      	add	sp, #116	@ 0x74
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	0598      	lsls	r0, r3, #22
 800639a:	d4f7      	bmi.n	800638c <_vfiprintf_r+0x44>
 800639c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800639e:	f7ff ffa9 	bl	80062f4 <__retarget_lock_release_recursive>
 80063a2:	e7f3      	b.n	800638c <_vfiprintf_r+0x44>
 80063a4:	2300      	movs	r3, #0
 80063a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80063a8:	2320      	movs	r3, #32
 80063aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80063b2:	2330      	movs	r3, #48	@ 0x30
 80063b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006564 <_vfiprintf_r+0x21c>
 80063b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063bc:	f04f 0901 	mov.w	r9, #1
 80063c0:	4623      	mov	r3, r4
 80063c2:	469a      	mov	sl, r3
 80063c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c8:	b10a      	cbz	r2, 80063ce <_vfiprintf_r+0x86>
 80063ca:	2a25      	cmp	r2, #37	@ 0x25
 80063cc:	d1f9      	bne.n	80063c2 <_vfiprintf_r+0x7a>
 80063ce:	ebba 0b04 	subs.w	fp, sl, r4
 80063d2:	d00b      	beq.n	80063ec <_vfiprintf_r+0xa4>
 80063d4:	465b      	mov	r3, fp
 80063d6:	4622      	mov	r2, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff ffa2 	bl	8006324 <__sfputs_r>
 80063e0:	3001      	adds	r0, #1
 80063e2:	f000 80a7 	beq.w	8006534 <_vfiprintf_r+0x1ec>
 80063e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063e8:	445a      	add	r2, fp
 80063ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80063ec:	f89a 3000 	ldrb.w	r3, [sl]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 809f 	beq.w	8006534 <_vfiprintf_r+0x1ec>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006400:	f10a 0a01 	add.w	sl, sl, #1
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	9307      	str	r3, [sp, #28]
 8006408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800640c:	931a      	str	r3, [sp, #104]	@ 0x68
 800640e:	4654      	mov	r4, sl
 8006410:	2205      	movs	r2, #5
 8006412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006416:	4853      	ldr	r0, [pc, #332]	@ (8006564 <_vfiprintf_r+0x21c>)
 8006418:	f7f9 ff02 	bl	8000220 <memchr>
 800641c:	9a04      	ldr	r2, [sp, #16]
 800641e:	b9d8      	cbnz	r0, 8006458 <_vfiprintf_r+0x110>
 8006420:	06d1      	lsls	r1, r2, #27
 8006422:	bf44      	itt	mi
 8006424:	2320      	movmi	r3, #32
 8006426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800642a:	0713      	lsls	r3, r2, #28
 800642c:	bf44      	itt	mi
 800642e:	232b      	movmi	r3, #43	@ 0x2b
 8006430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006434:	f89a 3000 	ldrb.w	r3, [sl]
 8006438:	2b2a      	cmp	r3, #42	@ 0x2a
 800643a:	d015      	beq.n	8006468 <_vfiprintf_r+0x120>
 800643c:	9a07      	ldr	r2, [sp, #28]
 800643e:	4654      	mov	r4, sl
 8006440:	2000      	movs	r0, #0
 8006442:	f04f 0c0a 	mov.w	ip, #10
 8006446:	4621      	mov	r1, r4
 8006448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800644c:	3b30      	subs	r3, #48	@ 0x30
 800644e:	2b09      	cmp	r3, #9
 8006450:	d94b      	bls.n	80064ea <_vfiprintf_r+0x1a2>
 8006452:	b1b0      	cbz	r0, 8006482 <_vfiprintf_r+0x13a>
 8006454:	9207      	str	r2, [sp, #28]
 8006456:	e014      	b.n	8006482 <_vfiprintf_r+0x13a>
 8006458:	eba0 0308 	sub.w	r3, r0, r8
 800645c:	fa09 f303 	lsl.w	r3, r9, r3
 8006460:	4313      	orrs	r3, r2
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	46a2      	mov	sl, r4
 8006466:	e7d2      	b.n	800640e <_vfiprintf_r+0xc6>
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	1d19      	adds	r1, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	9103      	str	r1, [sp, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfbb      	ittet	lt
 8006474:	425b      	neglt	r3, r3
 8006476:	f042 0202 	orrlt.w	r2, r2, #2
 800647a:	9307      	strge	r3, [sp, #28]
 800647c:	9307      	strlt	r3, [sp, #28]
 800647e:	bfb8      	it	lt
 8006480:	9204      	strlt	r2, [sp, #16]
 8006482:	7823      	ldrb	r3, [r4, #0]
 8006484:	2b2e      	cmp	r3, #46	@ 0x2e
 8006486:	d10a      	bne.n	800649e <_vfiprintf_r+0x156>
 8006488:	7863      	ldrb	r3, [r4, #1]
 800648a:	2b2a      	cmp	r3, #42	@ 0x2a
 800648c:	d132      	bne.n	80064f4 <_vfiprintf_r+0x1ac>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	1d1a      	adds	r2, r3, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	9203      	str	r2, [sp, #12]
 8006496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800649a:	3402      	adds	r4, #2
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006574 <_vfiprintf_r+0x22c>
 80064a2:	7821      	ldrb	r1, [r4, #0]
 80064a4:	2203      	movs	r2, #3
 80064a6:	4650      	mov	r0, sl
 80064a8:	f7f9 feba 	bl	8000220 <memchr>
 80064ac:	b138      	cbz	r0, 80064be <_vfiprintf_r+0x176>
 80064ae:	9b04      	ldr	r3, [sp, #16]
 80064b0:	eba0 000a 	sub.w	r0, r0, sl
 80064b4:	2240      	movs	r2, #64	@ 0x40
 80064b6:	4082      	lsls	r2, r0
 80064b8:	4313      	orrs	r3, r2
 80064ba:	3401      	adds	r4, #1
 80064bc:	9304      	str	r3, [sp, #16]
 80064be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c2:	4829      	ldr	r0, [pc, #164]	@ (8006568 <_vfiprintf_r+0x220>)
 80064c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064c8:	2206      	movs	r2, #6
 80064ca:	f7f9 fea9 	bl	8000220 <memchr>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d03f      	beq.n	8006552 <_vfiprintf_r+0x20a>
 80064d2:	4b26      	ldr	r3, [pc, #152]	@ (800656c <_vfiprintf_r+0x224>)
 80064d4:	bb1b      	cbnz	r3, 800651e <_vfiprintf_r+0x1d6>
 80064d6:	9b03      	ldr	r3, [sp, #12]
 80064d8:	3307      	adds	r3, #7
 80064da:	f023 0307 	bic.w	r3, r3, #7
 80064de:	3308      	adds	r3, #8
 80064e0:	9303      	str	r3, [sp, #12]
 80064e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e4:	443b      	add	r3, r7
 80064e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80064e8:	e76a      	b.n	80063c0 <_vfiprintf_r+0x78>
 80064ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ee:	460c      	mov	r4, r1
 80064f0:	2001      	movs	r0, #1
 80064f2:	e7a8      	b.n	8006446 <_vfiprintf_r+0xfe>
 80064f4:	2300      	movs	r3, #0
 80064f6:	3401      	adds	r4, #1
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	4619      	mov	r1, r3
 80064fc:	f04f 0c0a 	mov.w	ip, #10
 8006500:	4620      	mov	r0, r4
 8006502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006506:	3a30      	subs	r2, #48	@ 0x30
 8006508:	2a09      	cmp	r2, #9
 800650a:	d903      	bls.n	8006514 <_vfiprintf_r+0x1cc>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0c6      	beq.n	800649e <_vfiprintf_r+0x156>
 8006510:	9105      	str	r1, [sp, #20]
 8006512:	e7c4      	b.n	800649e <_vfiprintf_r+0x156>
 8006514:	fb0c 2101 	mla	r1, ip, r1, r2
 8006518:	4604      	mov	r4, r0
 800651a:	2301      	movs	r3, #1
 800651c:	e7f0      	b.n	8006500 <_vfiprintf_r+0x1b8>
 800651e:	ab03      	add	r3, sp, #12
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	462a      	mov	r2, r5
 8006524:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <_vfiprintf_r+0x228>)
 8006526:	a904      	add	r1, sp, #16
 8006528:	4630      	mov	r0, r6
 800652a:	f3af 8000 	nop.w
 800652e:	4607      	mov	r7, r0
 8006530:	1c78      	adds	r0, r7, #1
 8006532:	d1d6      	bne.n	80064e2 <_vfiprintf_r+0x19a>
 8006534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006536:	07d9      	lsls	r1, r3, #31
 8006538:	d405      	bmi.n	8006546 <_vfiprintf_r+0x1fe>
 800653a:	89ab      	ldrh	r3, [r5, #12]
 800653c:	059a      	lsls	r2, r3, #22
 800653e:	d402      	bmi.n	8006546 <_vfiprintf_r+0x1fe>
 8006540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006542:	f7ff fed7 	bl	80062f4 <__retarget_lock_release_recursive>
 8006546:	89ab      	ldrh	r3, [r5, #12]
 8006548:	065b      	lsls	r3, r3, #25
 800654a:	f53f af1f 	bmi.w	800638c <_vfiprintf_r+0x44>
 800654e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006550:	e71e      	b.n	8006390 <_vfiprintf_r+0x48>
 8006552:	ab03      	add	r3, sp, #12
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	462a      	mov	r2, r5
 8006558:	4b05      	ldr	r3, [pc, #20]	@ (8006570 <_vfiprintf_r+0x228>)
 800655a:	a904      	add	r1, sp, #16
 800655c:	4630      	mov	r0, r6
 800655e:	f000 f91b 	bl	8006798 <_printf_i>
 8006562:	e7e4      	b.n	800652e <_vfiprintf_r+0x1e6>
 8006564:	08006fbc 	.word	0x08006fbc
 8006568:	08006fc6 	.word	0x08006fc6
 800656c:	00000000 	.word	0x00000000
 8006570:	08006325 	.word	0x08006325
 8006574:	08006fc2 	.word	0x08006fc2

08006578 <sbrk_aligned>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	4e0f      	ldr	r6, [pc, #60]	@ (80065b8 <sbrk_aligned+0x40>)
 800657c:	460c      	mov	r4, r1
 800657e:	6831      	ldr	r1, [r6, #0]
 8006580:	4605      	mov	r5, r0
 8006582:	b911      	cbnz	r1, 800658a <sbrk_aligned+0x12>
 8006584:	f000 fc70 	bl	8006e68 <_sbrk_r>
 8006588:	6030      	str	r0, [r6, #0]
 800658a:	4621      	mov	r1, r4
 800658c:	4628      	mov	r0, r5
 800658e:	f000 fc6b 	bl	8006e68 <_sbrk_r>
 8006592:	1c43      	adds	r3, r0, #1
 8006594:	d103      	bne.n	800659e <sbrk_aligned+0x26>
 8006596:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800659a:	4620      	mov	r0, r4
 800659c:	bd70      	pop	{r4, r5, r6, pc}
 800659e:	1cc4      	adds	r4, r0, #3
 80065a0:	f024 0403 	bic.w	r4, r4, #3
 80065a4:	42a0      	cmp	r0, r4
 80065a6:	d0f8      	beq.n	800659a <sbrk_aligned+0x22>
 80065a8:	1a21      	subs	r1, r4, r0
 80065aa:	4628      	mov	r0, r5
 80065ac:	f000 fc5c 	bl	8006e68 <_sbrk_r>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d1f2      	bne.n	800659a <sbrk_aligned+0x22>
 80065b4:	e7ef      	b.n	8006596 <sbrk_aligned+0x1e>
 80065b6:	bf00      	nop
 80065b8:	20000484 	.word	0x20000484

080065bc <_malloc_r>:
 80065bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	1ccd      	adds	r5, r1, #3
 80065c2:	f025 0503 	bic.w	r5, r5, #3
 80065c6:	3508      	adds	r5, #8
 80065c8:	2d0c      	cmp	r5, #12
 80065ca:	bf38      	it	cc
 80065cc:	250c      	movcc	r5, #12
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	4606      	mov	r6, r0
 80065d2:	db01      	blt.n	80065d8 <_malloc_r+0x1c>
 80065d4:	42a9      	cmp	r1, r5
 80065d6:	d904      	bls.n	80065e2 <_malloc_r+0x26>
 80065d8:	230c      	movs	r3, #12
 80065da:	6033      	str	r3, [r6, #0]
 80065dc:	2000      	movs	r0, #0
 80065de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066b8 <_malloc_r+0xfc>
 80065e6:	f000 faa3 	bl	8006b30 <__malloc_lock>
 80065ea:	f8d8 3000 	ldr.w	r3, [r8]
 80065ee:	461c      	mov	r4, r3
 80065f0:	bb44      	cbnz	r4, 8006644 <_malloc_r+0x88>
 80065f2:	4629      	mov	r1, r5
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7ff ffbf 	bl	8006578 <sbrk_aligned>
 80065fa:	1c43      	adds	r3, r0, #1
 80065fc:	4604      	mov	r4, r0
 80065fe:	d158      	bne.n	80066b2 <_malloc_r+0xf6>
 8006600:	f8d8 4000 	ldr.w	r4, [r8]
 8006604:	4627      	mov	r7, r4
 8006606:	2f00      	cmp	r7, #0
 8006608:	d143      	bne.n	8006692 <_malloc_r+0xd6>
 800660a:	2c00      	cmp	r4, #0
 800660c:	d04b      	beq.n	80066a6 <_malloc_r+0xea>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	4639      	mov	r1, r7
 8006612:	4630      	mov	r0, r6
 8006614:	eb04 0903 	add.w	r9, r4, r3
 8006618:	f000 fc26 	bl	8006e68 <_sbrk_r>
 800661c:	4581      	cmp	r9, r0
 800661e:	d142      	bne.n	80066a6 <_malloc_r+0xea>
 8006620:	6821      	ldr	r1, [r4, #0]
 8006622:	1a6d      	subs	r5, r5, r1
 8006624:	4629      	mov	r1, r5
 8006626:	4630      	mov	r0, r6
 8006628:	f7ff ffa6 	bl	8006578 <sbrk_aligned>
 800662c:	3001      	adds	r0, #1
 800662e:	d03a      	beq.n	80066a6 <_malloc_r+0xea>
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	442b      	add	r3, r5
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	f8d8 3000 	ldr.w	r3, [r8]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	bb62      	cbnz	r2, 8006698 <_malloc_r+0xdc>
 800663e:	f8c8 7000 	str.w	r7, [r8]
 8006642:	e00f      	b.n	8006664 <_malloc_r+0xa8>
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	1b52      	subs	r2, r2, r5
 8006648:	d420      	bmi.n	800668c <_malloc_r+0xd0>
 800664a:	2a0b      	cmp	r2, #11
 800664c:	d917      	bls.n	800667e <_malloc_r+0xc2>
 800664e:	1961      	adds	r1, r4, r5
 8006650:	42a3      	cmp	r3, r4
 8006652:	6025      	str	r5, [r4, #0]
 8006654:	bf18      	it	ne
 8006656:	6059      	strne	r1, [r3, #4]
 8006658:	6863      	ldr	r3, [r4, #4]
 800665a:	bf08      	it	eq
 800665c:	f8c8 1000 	streq.w	r1, [r8]
 8006660:	5162      	str	r2, [r4, r5]
 8006662:	604b      	str	r3, [r1, #4]
 8006664:	4630      	mov	r0, r6
 8006666:	f000 fa69 	bl	8006b3c <__malloc_unlock>
 800666a:	f104 000b 	add.w	r0, r4, #11
 800666e:	1d23      	adds	r3, r4, #4
 8006670:	f020 0007 	bic.w	r0, r0, #7
 8006674:	1ac2      	subs	r2, r0, r3
 8006676:	bf1c      	itt	ne
 8006678:	1a1b      	subne	r3, r3, r0
 800667a:	50a3      	strne	r3, [r4, r2]
 800667c:	e7af      	b.n	80065de <_malloc_r+0x22>
 800667e:	6862      	ldr	r2, [r4, #4]
 8006680:	42a3      	cmp	r3, r4
 8006682:	bf0c      	ite	eq
 8006684:	f8c8 2000 	streq.w	r2, [r8]
 8006688:	605a      	strne	r2, [r3, #4]
 800668a:	e7eb      	b.n	8006664 <_malloc_r+0xa8>
 800668c:	4623      	mov	r3, r4
 800668e:	6864      	ldr	r4, [r4, #4]
 8006690:	e7ae      	b.n	80065f0 <_malloc_r+0x34>
 8006692:	463c      	mov	r4, r7
 8006694:	687f      	ldr	r7, [r7, #4]
 8006696:	e7b6      	b.n	8006606 <_malloc_r+0x4a>
 8006698:	461a      	mov	r2, r3
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	42a3      	cmp	r3, r4
 800669e:	d1fb      	bne.n	8006698 <_malloc_r+0xdc>
 80066a0:	2300      	movs	r3, #0
 80066a2:	6053      	str	r3, [r2, #4]
 80066a4:	e7de      	b.n	8006664 <_malloc_r+0xa8>
 80066a6:	230c      	movs	r3, #12
 80066a8:	6033      	str	r3, [r6, #0]
 80066aa:	4630      	mov	r0, r6
 80066ac:	f000 fa46 	bl	8006b3c <__malloc_unlock>
 80066b0:	e794      	b.n	80065dc <_malloc_r+0x20>
 80066b2:	6005      	str	r5, [r0, #0]
 80066b4:	e7d6      	b.n	8006664 <_malloc_r+0xa8>
 80066b6:	bf00      	nop
 80066b8:	20000488 	.word	0x20000488

080066bc <_printf_common>:
 80066bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c0:	4616      	mov	r6, r2
 80066c2:	4698      	mov	r8, r3
 80066c4:	688a      	ldr	r2, [r1, #8]
 80066c6:	690b      	ldr	r3, [r1, #16]
 80066c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066cc:	4293      	cmp	r3, r2
 80066ce:	bfb8      	it	lt
 80066d0:	4613      	movlt	r3, r2
 80066d2:	6033      	str	r3, [r6, #0]
 80066d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066d8:	4607      	mov	r7, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	b10a      	cbz	r2, 80066e2 <_printf_common+0x26>
 80066de:	3301      	adds	r3, #1
 80066e0:	6033      	str	r3, [r6, #0]
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	0699      	lsls	r1, r3, #26
 80066e6:	bf42      	ittt	mi
 80066e8:	6833      	ldrmi	r3, [r6, #0]
 80066ea:	3302      	addmi	r3, #2
 80066ec:	6033      	strmi	r3, [r6, #0]
 80066ee:	6825      	ldr	r5, [r4, #0]
 80066f0:	f015 0506 	ands.w	r5, r5, #6
 80066f4:	d106      	bne.n	8006704 <_printf_common+0x48>
 80066f6:	f104 0a19 	add.w	sl, r4, #25
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	6832      	ldr	r2, [r6, #0]
 80066fe:	1a9b      	subs	r3, r3, r2
 8006700:	42ab      	cmp	r3, r5
 8006702:	dc26      	bgt.n	8006752 <_printf_common+0x96>
 8006704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006708:	6822      	ldr	r2, [r4, #0]
 800670a:	3b00      	subs	r3, #0
 800670c:	bf18      	it	ne
 800670e:	2301      	movne	r3, #1
 8006710:	0692      	lsls	r2, r2, #26
 8006712:	d42b      	bmi.n	800676c <_printf_common+0xb0>
 8006714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006718:	4641      	mov	r1, r8
 800671a:	4638      	mov	r0, r7
 800671c:	47c8      	blx	r9
 800671e:	3001      	adds	r0, #1
 8006720:	d01e      	beq.n	8006760 <_printf_common+0xa4>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	6922      	ldr	r2, [r4, #16]
 8006726:	f003 0306 	and.w	r3, r3, #6
 800672a:	2b04      	cmp	r3, #4
 800672c:	bf02      	ittt	eq
 800672e:	68e5      	ldreq	r5, [r4, #12]
 8006730:	6833      	ldreq	r3, [r6, #0]
 8006732:	1aed      	subeq	r5, r5, r3
 8006734:	68a3      	ldr	r3, [r4, #8]
 8006736:	bf0c      	ite	eq
 8006738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800673c:	2500      	movne	r5, #0
 800673e:	4293      	cmp	r3, r2
 8006740:	bfc4      	itt	gt
 8006742:	1a9b      	subgt	r3, r3, r2
 8006744:	18ed      	addgt	r5, r5, r3
 8006746:	2600      	movs	r6, #0
 8006748:	341a      	adds	r4, #26
 800674a:	42b5      	cmp	r5, r6
 800674c:	d11a      	bne.n	8006784 <_printf_common+0xc8>
 800674e:	2000      	movs	r0, #0
 8006750:	e008      	b.n	8006764 <_printf_common+0xa8>
 8006752:	2301      	movs	r3, #1
 8006754:	4652      	mov	r2, sl
 8006756:	4641      	mov	r1, r8
 8006758:	4638      	mov	r0, r7
 800675a:	47c8      	blx	r9
 800675c:	3001      	adds	r0, #1
 800675e:	d103      	bne.n	8006768 <_printf_common+0xac>
 8006760:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006768:	3501      	adds	r5, #1
 800676a:	e7c6      	b.n	80066fa <_printf_common+0x3e>
 800676c:	18e1      	adds	r1, r4, r3
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	2030      	movs	r0, #48	@ 0x30
 8006772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006776:	4422      	add	r2, r4
 8006778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800677c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006780:	3302      	adds	r3, #2
 8006782:	e7c7      	b.n	8006714 <_printf_common+0x58>
 8006784:	2301      	movs	r3, #1
 8006786:	4622      	mov	r2, r4
 8006788:	4641      	mov	r1, r8
 800678a:	4638      	mov	r0, r7
 800678c:	47c8      	blx	r9
 800678e:	3001      	adds	r0, #1
 8006790:	d0e6      	beq.n	8006760 <_printf_common+0xa4>
 8006792:	3601      	adds	r6, #1
 8006794:	e7d9      	b.n	800674a <_printf_common+0x8e>
	...

08006798 <_printf_i>:
 8006798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800679c:	7e0f      	ldrb	r7, [r1, #24]
 800679e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067a0:	2f78      	cmp	r7, #120	@ 0x78
 80067a2:	4691      	mov	r9, r2
 80067a4:	4680      	mov	r8, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	469a      	mov	sl, r3
 80067aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067ae:	d807      	bhi.n	80067c0 <_printf_i+0x28>
 80067b0:	2f62      	cmp	r7, #98	@ 0x62
 80067b2:	d80a      	bhi.n	80067ca <_printf_i+0x32>
 80067b4:	2f00      	cmp	r7, #0
 80067b6:	f000 80d2 	beq.w	800695e <_printf_i+0x1c6>
 80067ba:	2f58      	cmp	r7, #88	@ 0x58
 80067bc:	f000 80b9 	beq.w	8006932 <_printf_i+0x19a>
 80067c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067c8:	e03a      	b.n	8006840 <_printf_i+0xa8>
 80067ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067ce:	2b15      	cmp	r3, #21
 80067d0:	d8f6      	bhi.n	80067c0 <_printf_i+0x28>
 80067d2:	a101      	add	r1, pc, #4	@ (adr r1, 80067d8 <_printf_i+0x40>)
 80067d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067d8:	08006831 	.word	0x08006831
 80067dc:	08006845 	.word	0x08006845
 80067e0:	080067c1 	.word	0x080067c1
 80067e4:	080067c1 	.word	0x080067c1
 80067e8:	080067c1 	.word	0x080067c1
 80067ec:	080067c1 	.word	0x080067c1
 80067f0:	08006845 	.word	0x08006845
 80067f4:	080067c1 	.word	0x080067c1
 80067f8:	080067c1 	.word	0x080067c1
 80067fc:	080067c1 	.word	0x080067c1
 8006800:	080067c1 	.word	0x080067c1
 8006804:	08006945 	.word	0x08006945
 8006808:	0800686f 	.word	0x0800686f
 800680c:	080068ff 	.word	0x080068ff
 8006810:	080067c1 	.word	0x080067c1
 8006814:	080067c1 	.word	0x080067c1
 8006818:	08006967 	.word	0x08006967
 800681c:	080067c1 	.word	0x080067c1
 8006820:	0800686f 	.word	0x0800686f
 8006824:	080067c1 	.word	0x080067c1
 8006828:	080067c1 	.word	0x080067c1
 800682c:	08006907 	.word	0x08006907
 8006830:	6833      	ldr	r3, [r6, #0]
 8006832:	1d1a      	adds	r2, r3, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6032      	str	r2, [r6, #0]
 8006838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800683c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006840:	2301      	movs	r3, #1
 8006842:	e09d      	b.n	8006980 <_printf_i+0x1e8>
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	6820      	ldr	r0, [r4, #0]
 8006848:	1d19      	adds	r1, r3, #4
 800684a:	6031      	str	r1, [r6, #0]
 800684c:	0606      	lsls	r6, r0, #24
 800684e:	d501      	bpl.n	8006854 <_printf_i+0xbc>
 8006850:	681d      	ldr	r5, [r3, #0]
 8006852:	e003      	b.n	800685c <_printf_i+0xc4>
 8006854:	0645      	lsls	r5, r0, #25
 8006856:	d5fb      	bpl.n	8006850 <_printf_i+0xb8>
 8006858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800685c:	2d00      	cmp	r5, #0
 800685e:	da03      	bge.n	8006868 <_printf_i+0xd0>
 8006860:	232d      	movs	r3, #45	@ 0x2d
 8006862:	426d      	negs	r5, r5
 8006864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006868:	4859      	ldr	r0, [pc, #356]	@ (80069d0 <_printf_i+0x238>)
 800686a:	230a      	movs	r3, #10
 800686c:	e011      	b.n	8006892 <_printf_i+0xfa>
 800686e:	6821      	ldr	r1, [r4, #0]
 8006870:	6833      	ldr	r3, [r6, #0]
 8006872:	0608      	lsls	r0, r1, #24
 8006874:	f853 5b04 	ldr.w	r5, [r3], #4
 8006878:	d402      	bmi.n	8006880 <_printf_i+0xe8>
 800687a:	0649      	lsls	r1, r1, #25
 800687c:	bf48      	it	mi
 800687e:	b2ad      	uxthmi	r5, r5
 8006880:	2f6f      	cmp	r7, #111	@ 0x6f
 8006882:	4853      	ldr	r0, [pc, #332]	@ (80069d0 <_printf_i+0x238>)
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	bf14      	ite	ne
 8006888:	230a      	movne	r3, #10
 800688a:	2308      	moveq	r3, #8
 800688c:	2100      	movs	r1, #0
 800688e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006892:	6866      	ldr	r6, [r4, #4]
 8006894:	60a6      	str	r6, [r4, #8]
 8006896:	2e00      	cmp	r6, #0
 8006898:	bfa2      	ittt	ge
 800689a:	6821      	ldrge	r1, [r4, #0]
 800689c:	f021 0104 	bicge.w	r1, r1, #4
 80068a0:	6021      	strge	r1, [r4, #0]
 80068a2:	b90d      	cbnz	r5, 80068a8 <_printf_i+0x110>
 80068a4:	2e00      	cmp	r6, #0
 80068a6:	d04b      	beq.n	8006940 <_printf_i+0x1a8>
 80068a8:	4616      	mov	r6, r2
 80068aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80068ae:	fb03 5711 	mls	r7, r3, r1, r5
 80068b2:	5dc7      	ldrb	r7, [r0, r7]
 80068b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068b8:	462f      	mov	r7, r5
 80068ba:	42bb      	cmp	r3, r7
 80068bc:	460d      	mov	r5, r1
 80068be:	d9f4      	bls.n	80068aa <_printf_i+0x112>
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d10b      	bne.n	80068dc <_printf_i+0x144>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	07df      	lsls	r7, r3, #31
 80068c8:	d508      	bpl.n	80068dc <_printf_i+0x144>
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	6861      	ldr	r1, [r4, #4]
 80068ce:	4299      	cmp	r1, r3
 80068d0:	bfde      	ittt	le
 80068d2:	2330      	movle	r3, #48	@ 0x30
 80068d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80068dc:	1b92      	subs	r2, r2, r6
 80068de:	6122      	str	r2, [r4, #16]
 80068e0:	f8cd a000 	str.w	sl, [sp]
 80068e4:	464b      	mov	r3, r9
 80068e6:	aa03      	add	r2, sp, #12
 80068e8:	4621      	mov	r1, r4
 80068ea:	4640      	mov	r0, r8
 80068ec:	f7ff fee6 	bl	80066bc <_printf_common>
 80068f0:	3001      	adds	r0, #1
 80068f2:	d14a      	bne.n	800698a <_printf_i+0x1f2>
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068f8:	b004      	add	sp, #16
 80068fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	f043 0320 	orr.w	r3, r3, #32
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	4833      	ldr	r0, [pc, #204]	@ (80069d4 <_printf_i+0x23c>)
 8006908:	2778      	movs	r7, #120	@ 0x78
 800690a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	6831      	ldr	r1, [r6, #0]
 8006912:	061f      	lsls	r7, r3, #24
 8006914:	f851 5b04 	ldr.w	r5, [r1], #4
 8006918:	d402      	bmi.n	8006920 <_printf_i+0x188>
 800691a:	065f      	lsls	r7, r3, #25
 800691c:	bf48      	it	mi
 800691e:	b2ad      	uxthmi	r5, r5
 8006920:	6031      	str	r1, [r6, #0]
 8006922:	07d9      	lsls	r1, r3, #31
 8006924:	bf44      	itt	mi
 8006926:	f043 0320 	orrmi.w	r3, r3, #32
 800692a:	6023      	strmi	r3, [r4, #0]
 800692c:	b11d      	cbz	r5, 8006936 <_printf_i+0x19e>
 800692e:	2310      	movs	r3, #16
 8006930:	e7ac      	b.n	800688c <_printf_i+0xf4>
 8006932:	4827      	ldr	r0, [pc, #156]	@ (80069d0 <_printf_i+0x238>)
 8006934:	e7e9      	b.n	800690a <_printf_i+0x172>
 8006936:	6823      	ldr	r3, [r4, #0]
 8006938:	f023 0320 	bic.w	r3, r3, #32
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	e7f6      	b.n	800692e <_printf_i+0x196>
 8006940:	4616      	mov	r6, r2
 8006942:	e7bd      	b.n	80068c0 <_printf_i+0x128>
 8006944:	6833      	ldr	r3, [r6, #0]
 8006946:	6825      	ldr	r5, [r4, #0]
 8006948:	6961      	ldr	r1, [r4, #20]
 800694a:	1d18      	adds	r0, r3, #4
 800694c:	6030      	str	r0, [r6, #0]
 800694e:	062e      	lsls	r6, r5, #24
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	d501      	bpl.n	8006958 <_printf_i+0x1c0>
 8006954:	6019      	str	r1, [r3, #0]
 8006956:	e002      	b.n	800695e <_printf_i+0x1c6>
 8006958:	0668      	lsls	r0, r5, #25
 800695a:	d5fb      	bpl.n	8006954 <_printf_i+0x1bc>
 800695c:	8019      	strh	r1, [r3, #0]
 800695e:	2300      	movs	r3, #0
 8006960:	6123      	str	r3, [r4, #16]
 8006962:	4616      	mov	r6, r2
 8006964:	e7bc      	b.n	80068e0 <_printf_i+0x148>
 8006966:	6833      	ldr	r3, [r6, #0]
 8006968:	1d1a      	adds	r2, r3, #4
 800696a:	6032      	str	r2, [r6, #0]
 800696c:	681e      	ldr	r6, [r3, #0]
 800696e:	6862      	ldr	r2, [r4, #4]
 8006970:	2100      	movs	r1, #0
 8006972:	4630      	mov	r0, r6
 8006974:	f7f9 fc54 	bl	8000220 <memchr>
 8006978:	b108      	cbz	r0, 800697e <_printf_i+0x1e6>
 800697a:	1b80      	subs	r0, r0, r6
 800697c:	6060      	str	r0, [r4, #4]
 800697e:	6863      	ldr	r3, [r4, #4]
 8006980:	6123      	str	r3, [r4, #16]
 8006982:	2300      	movs	r3, #0
 8006984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006988:	e7aa      	b.n	80068e0 <_printf_i+0x148>
 800698a:	6923      	ldr	r3, [r4, #16]
 800698c:	4632      	mov	r2, r6
 800698e:	4649      	mov	r1, r9
 8006990:	4640      	mov	r0, r8
 8006992:	47d0      	blx	sl
 8006994:	3001      	adds	r0, #1
 8006996:	d0ad      	beq.n	80068f4 <_printf_i+0x15c>
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	079b      	lsls	r3, r3, #30
 800699c:	d413      	bmi.n	80069c6 <_printf_i+0x22e>
 800699e:	68e0      	ldr	r0, [r4, #12]
 80069a0:	9b03      	ldr	r3, [sp, #12]
 80069a2:	4298      	cmp	r0, r3
 80069a4:	bfb8      	it	lt
 80069a6:	4618      	movlt	r0, r3
 80069a8:	e7a6      	b.n	80068f8 <_printf_i+0x160>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4632      	mov	r2, r6
 80069ae:	4649      	mov	r1, r9
 80069b0:	4640      	mov	r0, r8
 80069b2:	47d0      	blx	sl
 80069b4:	3001      	adds	r0, #1
 80069b6:	d09d      	beq.n	80068f4 <_printf_i+0x15c>
 80069b8:	3501      	adds	r5, #1
 80069ba:	68e3      	ldr	r3, [r4, #12]
 80069bc:	9903      	ldr	r1, [sp, #12]
 80069be:	1a5b      	subs	r3, r3, r1
 80069c0:	42ab      	cmp	r3, r5
 80069c2:	dcf2      	bgt.n	80069aa <_printf_i+0x212>
 80069c4:	e7eb      	b.n	800699e <_printf_i+0x206>
 80069c6:	2500      	movs	r5, #0
 80069c8:	f104 0619 	add.w	r6, r4, #25
 80069cc:	e7f5      	b.n	80069ba <_printf_i+0x222>
 80069ce:	bf00      	nop
 80069d0:	08006fcd 	.word	0x08006fcd
 80069d4:	08006fde 	.word	0x08006fde

080069d8 <__sflush_r>:
 80069d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e0:	0716      	lsls	r6, r2, #28
 80069e2:	4605      	mov	r5, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	d454      	bmi.n	8006a92 <__sflush_r+0xba>
 80069e8:	684b      	ldr	r3, [r1, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	dc02      	bgt.n	80069f4 <__sflush_r+0x1c>
 80069ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	dd48      	ble.n	8006a86 <__sflush_r+0xae>
 80069f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	d045      	beq.n	8006a86 <__sflush_r+0xae>
 80069fa:	2300      	movs	r3, #0
 80069fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a00:	682f      	ldr	r7, [r5, #0]
 8006a02:	6a21      	ldr	r1, [r4, #32]
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	d030      	beq.n	8006a6a <__sflush_r+0x92>
 8006a08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a0a:	89a3      	ldrh	r3, [r4, #12]
 8006a0c:	0759      	lsls	r1, r3, #29
 8006a0e:	d505      	bpl.n	8006a1c <__sflush_r+0x44>
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a16:	b10b      	cbz	r3, 8006a1c <__sflush_r+0x44>
 8006a18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a1a:	1ad2      	subs	r2, r2, r3
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a20:	6a21      	ldr	r1, [r4, #32]
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b0      	blx	r6
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	89a3      	ldrh	r3, [r4, #12]
 8006a2a:	d106      	bne.n	8006a3a <__sflush_r+0x62>
 8006a2c:	6829      	ldr	r1, [r5, #0]
 8006a2e:	291d      	cmp	r1, #29
 8006a30:	d82b      	bhi.n	8006a8a <__sflush_r+0xb2>
 8006a32:	4a2a      	ldr	r2, [pc, #168]	@ (8006adc <__sflush_r+0x104>)
 8006a34:	410a      	asrs	r2, r1
 8006a36:	07d6      	lsls	r6, r2, #31
 8006a38:	d427      	bmi.n	8006a8a <__sflush_r+0xb2>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	6062      	str	r2, [r4, #4]
 8006a3e:	04d9      	lsls	r1, r3, #19
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	6022      	str	r2, [r4, #0]
 8006a44:	d504      	bpl.n	8006a50 <__sflush_r+0x78>
 8006a46:	1c42      	adds	r2, r0, #1
 8006a48:	d101      	bne.n	8006a4e <__sflush_r+0x76>
 8006a4a:	682b      	ldr	r3, [r5, #0]
 8006a4c:	b903      	cbnz	r3, 8006a50 <__sflush_r+0x78>
 8006a4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a52:	602f      	str	r7, [r5, #0]
 8006a54:	b1b9      	cbz	r1, 8006a86 <__sflush_r+0xae>
 8006a56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a5a:	4299      	cmp	r1, r3
 8006a5c:	d002      	beq.n	8006a64 <__sflush_r+0x8c>
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 fa24 	bl	8006eac <_free_r>
 8006a64:	2300      	movs	r3, #0
 8006a66:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a68:	e00d      	b.n	8006a86 <__sflush_r+0xae>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b0      	blx	r6
 8006a70:	4602      	mov	r2, r0
 8006a72:	1c50      	adds	r0, r2, #1
 8006a74:	d1c9      	bne.n	8006a0a <__sflush_r+0x32>
 8006a76:	682b      	ldr	r3, [r5, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0c6      	beq.n	8006a0a <__sflush_r+0x32>
 8006a7c:	2b1d      	cmp	r3, #29
 8006a7e:	d001      	beq.n	8006a84 <__sflush_r+0xac>
 8006a80:	2b16      	cmp	r3, #22
 8006a82:	d11e      	bne.n	8006ac2 <__sflush_r+0xea>
 8006a84:	602f      	str	r7, [r5, #0]
 8006a86:	2000      	movs	r0, #0
 8006a88:	e022      	b.n	8006ad0 <__sflush_r+0xf8>
 8006a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a8e:	b21b      	sxth	r3, r3
 8006a90:	e01b      	b.n	8006aca <__sflush_r+0xf2>
 8006a92:	690f      	ldr	r7, [r1, #16]
 8006a94:	2f00      	cmp	r7, #0
 8006a96:	d0f6      	beq.n	8006a86 <__sflush_r+0xae>
 8006a98:	0793      	lsls	r3, r2, #30
 8006a9a:	680e      	ldr	r6, [r1, #0]
 8006a9c:	bf08      	it	eq
 8006a9e:	694b      	ldreq	r3, [r1, #20]
 8006aa0:	600f      	str	r7, [r1, #0]
 8006aa2:	bf18      	it	ne
 8006aa4:	2300      	movne	r3, #0
 8006aa6:	eba6 0807 	sub.w	r8, r6, r7
 8006aaa:	608b      	str	r3, [r1, #8]
 8006aac:	f1b8 0f00 	cmp.w	r8, #0
 8006ab0:	dde9      	ble.n	8006a86 <__sflush_r+0xae>
 8006ab2:	6a21      	ldr	r1, [r4, #32]
 8006ab4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ab6:	4643      	mov	r3, r8
 8006ab8:	463a      	mov	r2, r7
 8006aba:	4628      	mov	r0, r5
 8006abc:	47b0      	blx	r6
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	dc08      	bgt.n	8006ad4 <__sflush_r+0xfc>
 8006ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aca:	81a3      	strh	r3, [r4, #12]
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad4:	4407      	add	r7, r0
 8006ad6:	eba8 0800 	sub.w	r8, r8, r0
 8006ada:	e7e7      	b.n	8006aac <__sflush_r+0xd4>
 8006adc:	dfbffffe 	.word	0xdfbffffe

08006ae0 <_fflush_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	690b      	ldr	r3, [r1, #16]
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	b913      	cbnz	r3, 8006af0 <_fflush_r+0x10>
 8006aea:	2500      	movs	r5, #0
 8006aec:	4628      	mov	r0, r5
 8006aee:	bd38      	pop	{r3, r4, r5, pc}
 8006af0:	b118      	cbz	r0, 8006afa <_fflush_r+0x1a>
 8006af2:	6a03      	ldr	r3, [r0, #32]
 8006af4:	b90b      	cbnz	r3, 8006afa <_fflush_r+0x1a>
 8006af6:	f7ff fb23 	bl	8006140 <__sinit>
 8006afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f3      	beq.n	8006aea <_fflush_r+0xa>
 8006b02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b04:	07d0      	lsls	r0, r2, #31
 8006b06:	d404      	bmi.n	8006b12 <_fflush_r+0x32>
 8006b08:	0599      	lsls	r1, r3, #22
 8006b0a:	d402      	bmi.n	8006b12 <_fflush_r+0x32>
 8006b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b0e:	f7ff fbf0 	bl	80062f2 <__retarget_lock_acquire_recursive>
 8006b12:	4628      	mov	r0, r5
 8006b14:	4621      	mov	r1, r4
 8006b16:	f7ff ff5f 	bl	80069d8 <__sflush_r>
 8006b1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b1c:	07da      	lsls	r2, r3, #31
 8006b1e:	4605      	mov	r5, r0
 8006b20:	d4e4      	bmi.n	8006aec <_fflush_r+0xc>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	059b      	lsls	r3, r3, #22
 8006b26:	d4e1      	bmi.n	8006aec <_fflush_r+0xc>
 8006b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b2a:	f7ff fbe3 	bl	80062f4 <__retarget_lock_release_recursive>
 8006b2e:	e7dd      	b.n	8006aec <_fflush_r+0xc>

08006b30 <__malloc_lock>:
 8006b30:	4801      	ldr	r0, [pc, #4]	@ (8006b38 <__malloc_lock+0x8>)
 8006b32:	f7ff bbde 	b.w	80062f2 <__retarget_lock_acquire_recursive>
 8006b36:	bf00      	nop
 8006b38:	20000480 	.word	0x20000480

08006b3c <__malloc_unlock>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	@ (8006b44 <__malloc_unlock+0x8>)
 8006b3e:	f7ff bbd9 	b.w	80062f4 <__retarget_lock_release_recursive>
 8006b42:	bf00      	nop
 8006b44:	20000480 	.word	0x20000480

08006b48 <__sread>:
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	460c      	mov	r4, r1
 8006b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b50:	f000 f978 	bl	8006e44 <_read_r>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	bfab      	itete	ge
 8006b58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b5a:	89a3      	ldrhlt	r3, [r4, #12]
 8006b5c:	181b      	addge	r3, r3, r0
 8006b5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b62:	bfac      	ite	ge
 8006b64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b66:	81a3      	strhlt	r3, [r4, #12]
 8006b68:	bd10      	pop	{r4, pc}

08006b6a <__swrite>:
 8006b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6e:	461f      	mov	r7, r3
 8006b70:	898b      	ldrh	r3, [r1, #12]
 8006b72:	05db      	lsls	r3, r3, #23
 8006b74:	4605      	mov	r5, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	4616      	mov	r6, r2
 8006b7a:	d505      	bpl.n	8006b88 <__swrite+0x1e>
 8006b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b80:	2302      	movs	r3, #2
 8006b82:	2200      	movs	r2, #0
 8006b84:	f000 f94c 	bl	8006e20 <_lseek_r>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	4632      	mov	r2, r6
 8006b96:	463b      	mov	r3, r7
 8006b98:	4628      	mov	r0, r5
 8006b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9e:	f000 b973 	b.w	8006e88 <_write_r>

08006ba2 <__sseek>:
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006baa:	f000 f939 	bl	8006e20 <_lseek_r>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	bf15      	itete	ne
 8006bb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bbe:	81a3      	strheq	r3, [r4, #12]
 8006bc0:	bf18      	it	ne
 8006bc2:	81a3      	strhne	r3, [r4, #12]
 8006bc4:	bd10      	pop	{r4, pc}

08006bc6 <__sclose>:
 8006bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bca:	f000 b8f7 	b.w	8006dbc <_close_r>

08006bce <__swbuf_r>:
 8006bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd0:	460e      	mov	r6, r1
 8006bd2:	4614      	mov	r4, r2
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	b118      	cbz	r0, 8006be0 <__swbuf_r+0x12>
 8006bd8:	6a03      	ldr	r3, [r0, #32]
 8006bda:	b90b      	cbnz	r3, 8006be0 <__swbuf_r+0x12>
 8006bdc:	f7ff fab0 	bl	8006140 <__sinit>
 8006be0:	69a3      	ldr	r3, [r4, #24]
 8006be2:	60a3      	str	r3, [r4, #8]
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	071a      	lsls	r2, r3, #28
 8006be8:	d501      	bpl.n	8006bee <__swbuf_r+0x20>
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	b943      	cbnz	r3, 8006c00 <__swbuf_r+0x32>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	f000 f82b 	bl	8006c4c <__swsetup_r>
 8006bf6:	b118      	cbz	r0, 8006c00 <__swbuf_r+0x32>
 8006bf8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	6922      	ldr	r2, [r4, #16]
 8006c04:	1a98      	subs	r0, r3, r2
 8006c06:	6963      	ldr	r3, [r4, #20]
 8006c08:	b2f6      	uxtb	r6, r6
 8006c0a:	4283      	cmp	r3, r0
 8006c0c:	4637      	mov	r7, r6
 8006c0e:	dc05      	bgt.n	8006c1c <__swbuf_r+0x4e>
 8006c10:	4621      	mov	r1, r4
 8006c12:	4628      	mov	r0, r5
 8006c14:	f7ff ff64 	bl	8006ae0 <_fflush_r>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d1ed      	bne.n	8006bf8 <__swbuf_r+0x2a>
 8006c1c:	68a3      	ldr	r3, [r4, #8]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	60a3      	str	r3, [r4, #8]
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	6022      	str	r2, [r4, #0]
 8006c28:	701e      	strb	r6, [r3, #0]
 8006c2a:	6962      	ldr	r2, [r4, #20]
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d004      	beq.n	8006c3c <__swbuf_r+0x6e>
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	07db      	lsls	r3, r3, #31
 8006c36:	d5e1      	bpl.n	8006bfc <__swbuf_r+0x2e>
 8006c38:	2e0a      	cmp	r6, #10
 8006c3a:	d1df      	bne.n	8006bfc <__swbuf_r+0x2e>
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7ff ff4e 	bl	8006ae0 <_fflush_r>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d0d9      	beq.n	8006bfc <__swbuf_r+0x2e>
 8006c48:	e7d6      	b.n	8006bf8 <__swbuf_r+0x2a>
	...

08006c4c <__swsetup_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4b29      	ldr	r3, [pc, #164]	@ (8006cf4 <__swsetup_r+0xa8>)
 8006c50:	4605      	mov	r5, r0
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	460c      	mov	r4, r1
 8006c56:	b118      	cbz	r0, 8006c60 <__swsetup_r+0x14>
 8006c58:	6a03      	ldr	r3, [r0, #32]
 8006c5a:	b90b      	cbnz	r3, 8006c60 <__swsetup_r+0x14>
 8006c5c:	f7ff fa70 	bl	8006140 <__sinit>
 8006c60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c64:	0719      	lsls	r1, r3, #28
 8006c66:	d422      	bmi.n	8006cae <__swsetup_r+0x62>
 8006c68:	06da      	lsls	r2, r3, #27
 8006c6a:	d407      	bmi.n	8006c7c <__swsetup_r+0x30>
 8006c6c:	2209      	movs	r2, #9
 8006c6e:	602a      	str	r2, [r5, #0]
 8006c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c7a:	e033      	b.n	8006ce4 <__swsetup_r+0x98>
 8006c7c:	0758      	lsls	r0, r3, #29
 8006c7e:	d512      	bpl.n	8006ca6 <__swsetup_r+0x5a>
 8006c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c82:	b141      	cbz	r1, 8006c96 <__swsetup_r+0x4a>
 8006c84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c88:	4299      	cmp	r1, r3
 8006c8a:	d002      	beq.n	8006c92 <__swsetup_r+0x46>
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 f90d 	bl	8006eac <_free_r>
 8006c92:	2300      	movs	r3, #0
 8006c94:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c9c:	81a3      	strh	r3, [r4, #12]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6063      	str	r3, [r4, #4]
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	f043 0308 	orr.w	r3, r3, #8
 8006cac:	81a3      	strh	r3, [r4, #12]
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	b94b      	cbnz	r3, 8006cc6 <__swsetup_r+0x7a>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cbc:	d003      	beq.n	8006cc6 <__swsetup_r+0x7a>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f000 f83f 	bl	8006d44 <__smakebuf_r>
 8006cc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cca:	f013 0201 	ands.w	r2, r3, #1
 8006cce:	d00a      	beq.n	8006ce6 <__swsetup_r+0x9a>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	60a2      	str	r2, [r4, #8]
 8006cd4:	6962      	ldr	r2, [r4, #20]
 8006cd6:	4252      	negs	r2, r2
 8006cd8:	61a2      	str	r2, [r4, #24]
 8006cda:	6922      	ldr	r2, [r4, #16]
 8006cdc:	b942      	cbnz	r2, 8006cf0 <__swsetup_r+0xa4>
 8006cde:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ce2:	d1c5      	bne.n	8006c70 <__swsetup_r+0x24>
 8006ce4:	bd38      	pop	{r3, r4, r5, pc}
 8006ce6:	0799      	lsls	r1, r3, #30
 8006ce8:	bf58      	it	pl
 8006cea:	6962      	ldrpl	r2, [r4, #20]
 8006cec:	60a2      	str	r2, [r4, #8]
 8006cee:	e7f4      	b.n	8006cda <__swsetup_r+0x8e>
 8006cf0:	2000      	movs	r0, #0
 8006cf2:	e7f7      	b.n	8006ce4 <__swsetup_r+0x98>
 8006cf4:	20000018 	.word	0x20000018

08006cf8 <__swhatbuf_r>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d00:	2900      	cmp	r1, #0
 8006d02:	b096      	sub	sp, #88	@ 0x58
 8006d04:	4615      	mov	r5, r2
 8006d06:	461e      	mov	r6, r3
 8006d08:	da0d      	bge.n	8006d26 <__swhatbuf_r+0x2e>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d10:	f04f 0100 	mov.w	r1, #0
 8006d14:	bf14      	ite	ne
 8006d16:	2340      	movne	r3, #64	@ 0x40
 8006d18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	6031      	str	r1, [r6, #0]
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	b016      	add	sp, #88	@ 0x58
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	466a      	mov	r2, sp
 8006d28:	f000 f858 	bl	8006ddc <_fstat_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	dbec      	blt.n	8006d0a <__swhatbuf_r+0x12>
 8006d30:	9901      	ldr	r1, [sp, #4]
 8006d32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d3a:	4259      	negs	r1, r3
 8006d3c:	4159      	adcs	r1, r3
 8006d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d42:	e7eb      	b.n	8006d1c <__swhatbuf_r+0x24>

08006d44 <__smakebuf_r>:
 8006d44:	898b      	ldrh	r3, [r1, #12]
 8006d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d48:	079d      	lsls	r5, r3, #30
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	d507      	bpl.n	8006d60 <__smakebuf_r+0x1c>
 8006d50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	6123      	str	r3, [r4, #16]
 8006d58:	2301      	movs	r3, #1
 8006d5a:	6163      	str	r3, [r4, #20]
 8006d5c:	b003      	add	sp, #12
 8006d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d60:	ab01      	add	r3, sp, #4
 8006d62:	466a      	mov	r2, sp
 8006d64:	f7ff ffc8 	bl	8006cf8 <__swhatbuf_r>
 8006d68:	9f00      	ldr	r7, [sp, #0]
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f7ff fc24 	bl	80065bc <_malloc_r>
 8006d74:	b948      	cbnz	r0, 8006d8a <__smakebuf_r+0x46>
 8006d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7a:	059a      	lsls	r2, r3, #22
 8006d7c:	d4ee      	bmi.n	8006d5c <__smakebuf_r+0x18>
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	f043 0302 	orr.w	r3, r3, #2
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	e7e2      	b.n	8006d50 <__smakebuf_r+0xc>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	6020      	str	r0, [r4, #0]
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d92:	81a3      	strh	r3, [r4, #12]
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d9a:	b15b      	cbz	r3, 8006db4 <__smakebuf_r+0x70>
 8006d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 f82d 	bl	8006e00 <_isatty_r>
 8006da6:	b128      	cbz	r0, 8006db4 <__smakebuf_r+0x70>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	431d      	orrs	r5, r3
 8006db8:	81a5      	strh	r5, [r4, #12]
 8006dba:	e7cf      	b.n	8006d5c <__smakebuf_r+0x18>

08006dbc <_close_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d06      	ldr	r5, [pc, #24]	@ (8006dd8 <_close_r+0x1c>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7f9 fe59 	bl	8000a7e <_close>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_close_r+0x1a>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_close_r+0x1a>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	2000048c 	.word	0x2000048c

08006ddc <_fstat_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d07      	ldr	r5, [pc, #28]	@ (8006dfc <_fstat_r+0x20>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	4611      	mov	r1, r2
 8006de8:	602b      	str	r3, [r5, #0]
 8006dea:	f7f9 fe54 	bl	8000a96 <_fstat>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d102      	bne.n	8006df8 <_fstat_r+0x1c>
 8006df2:	682b      	ldr	r3, [r5, #0]
 8006df4:	b103      	cbz	r3, 8006df8 <_fstat_r+0x1c>
 8006df6:	6023      	str	r3, [r4, #0]
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	bf00      	nop
 8006dfc:	2000048c 	.word	0x2000048c

08006e00 <_isatty_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d06      	ldr	r5, [pc, #24]	@ (8006e1c <_isatty_r+0x1c>)
 8006e04:	2300      	movs	r3, #0
 8006e06:	4604      	mov	r4, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	f7f9 fe53 	bl	8000ab6 <_isatty>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_isatty_r+0x1a>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_isatty_r+0x1a>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	2000048c 	.word	0x2000048c

08006e20 <_lseek_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	@ (8006e40 <_lseek_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7f9 fe4c 	bl	8000acc <_lseek>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_lseek_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_lseek_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	2000048c 	.word	0x2000048c

08006e44 <_read_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d07      	ldr	r5, [pc, #28]	@ (8006e64 <_read_r+0x20>)
 8006e48:	4604      	mov	r4, r0
 8006e4a:	4608      	mov	r0, r1
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	602a      	str	r2, [r5, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f7f9 fdda 	bl	8000a0c <_read>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_read_r+0x1e>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_read_r+0x1e>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	2000048c 	.word	0x2000048c

08006e68 <_sbrk_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d06      	ldr	r5, [pc, #24]	@ (8006e84 <_sbrk_r+0x1c>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	f7f9 fe38 	bl	8000ae8 <_sbrk>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_sbrk_r+0x1a>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_sbrk_r+0x1a>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	2000048c 	.word	0x2000048c

08006e88 <_write_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d07      	ldr	r5, [pc, #28]	@ (8006ea8 <_write_r+0x20>)
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	4608      	mov	r0, r1
 8006e90:	4611      	mov	r1, r2
 8006e92:	2200      	movs	r2, #0
 8006e94:	602a      	str	r2, [r5, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f7f9 fdd5 	bl	8000a46 <_write>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_write_r+0x1e>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_write_r+0x1e>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	2000048c 	.word	0x2000048c

08006eac <_free_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4605      	mov	r5, r0
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	d041      	beq.n	8006f38 <_free_r+0x8c>
 8006eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb8:	1f0c      	subs	r4, r1, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	bfb8      	it	lt
 8006ebe:	18e4      	addlt	r4, r4, r3
 8006ec0:	f7ff fe36 	bl	8006b30 <__malloc_lock>
 8006ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8006f3c <_free_r+0x90>)
 8006ec6:	6813      	ldr	r3, [r2, #0]
 8006ec8:	b933      	cbnz	r3, 8006ed8 <_free_r+0x2c>
 8006eca:	6063      	str	r3, [r4, #4]
 8006ecc:	6014      	str	r4, [r2, #0]
 8006ece:	4628      	mov	r0, r5
 8006ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed4:	f7ff be32 	b.w	8006b3c <__malloc_unlock>
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d908      	bls.n	8006eee <_free_r+0x42>
 8006edc:	6820      	ldr	r0, [r4, #0]
 8006ede:	1821      	adds	r1, r4, r0
 8006ee0:	428b      	cmp	r3, r1
 8006ee2:	bf01      	itttt	eq
 8006ee4:	6819      	ldreq	r1, [r3, #0]
 8006ee6:	685b      	ldreq	r3, [r3, #4]
 8006ee8:	1809      	addeq	r1, r1, r0
 8006eea:	6021      	streq	r1, [r4, #0]
 8006eec:	e7ed      	b.n	8006eca <_free_r+0x1e>
 8006eee:	461a      	mov	r2, r3
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	b10b      	cbz	r3, 8006ef8 <_free_r+0x4c>
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	d9fa      	bls.n	8006eee <_free_r+0x42>
 8006ef8:	6811      	ldr	r1, [r2, #0]
 8006efa:	1850      	adds	r0, r2, r1
 8006efc:	42a0      	cmp	r0, r4
 8006efe:	d10b      	bne.n	8006f18 <_free_r+0x6c>
 8006f00:	6820      	ldr	r0, [r4, #0]
 8006f02:	4401      	add	r1, r0
 8006f04:	1850      	adds	r0, r2, r1
 8006f06:	4283      	cmp	r3, r0
 8006f08:	6011      	str	r1, [r2, #0]
 8006f0a:	d1e0      	bne.n	8006ece <_free_r+0x22>
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	6053      	str	r3, [r2, #4]
 8006f12:	4408      	add	r0, r1
 8006f14:	6010      	str	r0, [r2, #0]
 8006f16:	e7da      	b.n	8006ece <_free_r+0x22>
 8006f18:	d902      	bls.n	8006f20 <_free_r+0x74>
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	e7d6      	b.n	8006ece <_free_r+0x22>
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	1821      	adds	r1, r4, r0
 8006f24:	428b      	cmp	r3, r1
 8006f26:	bf04      	itt	eq
 8006f28:	6819      	ldreq	r1, [r3, #0]
 8006f2a:	685b      	ldreq	r3, [r3, #4]
 8006f2c:	6063      	str	r3, [r4, #4]
 8006f2e:	bf04      	itt	eq
 8006f30:	1809      	addeq	r1, r1, r0
 8006f32:	6021      	streq	r1, [r4, #0]
 8006f34:	6054      	str	r4, [r2, #4]
 8006f36:	e7ca      	b.n	8006ece <_free_r+0x22>
 8006f38:	bd38      	pop	{r3, r4, r5, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000488 	.word	0x20000488

08006f40 <_init>:
 8006f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f42:	bf00      	nop
 8006f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f46:	bc08      	pop	{r3}
 8006f48:	469e      	mov	lr, r3
 8006f4a:	4770      	bx	lr

08006f4c <_fini>:
 8006f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4e:	bf00      	nop
 8006f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f52:	bc08      	pop	{r3}
 8006f54:	469e      	mov	lr, r3
 8006f56:	4770      	bx	lr
